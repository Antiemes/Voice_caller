
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000015fc  00001690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000246  00800148  00800148  000016d8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000829b  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025f0  00000000  00000000  00009db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009050  00000000  00000000  0000c3a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b58  00000000  00000000  000153f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000291f  00000000  00000000  00015f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004dd1  00000000  00000000  0001886f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000758  00000000  00000000  0001d640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
       2:	00 00       	nop
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
      28:	aa c6       	rjmp	.+3412   	; 0xd7e <__vector_10>
      2a:	00 00       	nop
      2c:	74 c7       	rjmp	.+3816   	; 0xf16 <__vector_11>
      2e:	00 00       	nop
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
      54:	09 c3       	rjmp	.+1554   	; 0x668 <__vector_21>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
      66:	00 00       	nop
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop
      98:	6b c0       	rjmp	.+214    	; 0x170 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	69 c0       	rjmp	.+210    	; 0x170 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	67 c0       	rjmp	.+206    	; 0x170 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	65 c0       	rjmp	.+202    	; 0x170 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	63 c0       	rjmp	.+198    	; 0x170 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	ec ef       	ldi	r30, 0xFC	; 252
     14c:	f5 e1       	ldi	r31, 0x15	; 21
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	a8 34       	cpi	r26, 0x48	; 72
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	23 e0       	ldi	r18, 0x03	; 3
     15c:	a8 e4       	ldi	r26, 0x48	; 72
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	ae 38       	cpi	r26, 0x8E	; 142
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	2e d1       	rcall	.+604    	; 0x3c8 <main>
     16c:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <_exit>

00000170 <__bad_interrupt>:
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <ledInit>:
volatile voice_state_t voiceState=STOPPED;

void ledInit(void)
{
  //LEDs: PD7, PE6
  PORTD &= ~_BV(PD7);
     172:	5f 98       	cbi	0x0b, 7	; 11
  DDRD |= _BV(PD7);
     174:	57 9a       	sbi	0x0a, 7	; 10

  PORTE &= ~_BV(PE6);
     176:	76 98       	cbi	0x0e, 6	; 14
  DDRE |= _BV(PE6);
     178:	6e 9a       	sbi	0x0d, 6	; 13
}
     17a:	08 95       	ret

0000017c <buttonInit>:
void buttonInit(void)
{
  //Inputs, pullup enabled.

  //A3, PF4
  DDRF &= ~_BV(PF4);
     17c:	84 98       	cbi	0x10, 4	; 16
  PORTF |= _BV(PF4);
     17e:	8c 9a       	sbi	0x11, 4	; 17

  //A2, PF5
  DDRF &= ~_BV(PF5);
     180:	85 98       	cbi	0x10, 5	; 16
  PORTF |= _BV(PF5);
     182:	8d 9a       	sbi	0x11, 5	; 17

  //A0, PF7
  DDRF &= ~_BV(PF7);
     184:	87 98       	cbi	0x10, 7	; 16
  PORTF |= _BV(PF7);
     186:	8f 9a       	sbi	0x11, 7	; 17

  //D9,  PB5
  DDRB &= ~_BV(PB5);
     188:	25 98       	cbi	0x04, 5	; 4
  PORTB |= _BV(PB5);
     18a:	2d 9a       	sbi	0x05, 5	; 5

  //D8,  PB4
  DDRB &= ~_BV(PB4);
     18c:	24 98       	cbi	0x04, 4	; 4
  PORTB |= _BV(PB4);
     18e:	2c 9a       	sbi	0x05, 4	; 5
}
     190:	08 95       	ret

00000192 <relayInit>:

void relayInit(void)
{
  //D4, PD4
  PORTD &= ~_BV(PD4);
     192:	5c 98       	cbi	0x0b, 4	; 11
  DDRD |= _BV(PD4);
     194:	54 9a       	sbi	0x0a, 4	; 10

  //D5, PC6
  PORTC &= ~_BV(PC6);
     196:	46 98       	cbi	0x08, 6	; 8
  DDRC |= _BV(PC6);
     198:	3e 9a       	sbi	0x07, 6	; 7
}
     19a:	08 95       	ret

0000019c <relay>:

void relay(relay_state_t state)
{
  if (state==RELAY_RX)
     19c:	81 11       	cpse	r24, r1
     19e:	09 c0       	rjmp	.+18     	; 0x1b2 <relay+0x16>
  {
    PORTC |=  _BV(PC6);
     1a0:	46 9a       	sbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a2:	8f e3       	ldi	r24, 0x3F	; 63
     1a4:	9c e9       	ldi	r25, 0x9C	; 156
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <relay+0xa>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <relay+0x10>
     1ac:	00 00       	nop
    _delay_ms(10);
    PORTC &= ~_BV(PC6);
     1ae:	46 98       	cbi	0x08, 6	; 8
     1b0:	08 95       	ret
  }
  else if (state==RELAY_TX)
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	41 f4       	brne	.+16     	; 0x1c6 <relay+0x2a>
  {
    PORTD |=  _BV(PD4);
     1b6:	5c 9a       	sbi	0x0b, 4	; 11
     1b8:	8f e3       	ldi	r24, 0x3F	; 63
     1ba:	9c e9       	ldi	r25, 0x9C	; 156
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <relay+0x20>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <relay+0x26>
     1c2:	00 00       	nop
    _delay_ms(10);
    PORTD &= ~_BV(PD4);
     1c4:	5c 98       	cbi	0x0b, 4	; 11
  }
}
     1c6:	08 95       	ret

000001c8 <pttInit>:

void pttInit(void)
{
  //D2, PD1
  PORTD &= ~_BV(PD1);
     1c8:	59 98       	cbi	0x0b, 1	; 11
  DDRD |= _BV(PD1);
     1ca:	51 9a       	sbi	0x0a, 1	; 10

  //A1, PTT sense, TODO: ADC init
}
     1cc:	08 95       	ret

000001ce <ptt>:

void ptt(uint8_t state)
{
  if (state==0)
     1ce:	81 11       	cpse	r24, r1
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <ptt+0x8>
  {
    PORTD &= ~_BV(PD1);
     1d2:	59 98       	cbi	0x0b, 1	; 11
     1d4:	08 95       	ret
  }
  else
  {
    PORTD |= _BV(PD1);
     1d6:	59 9a       	sbi	0x0b, 1	; 11
  }
}
     1d8:	08 95       	ret

000001da <pwm_init>:

//initialize fast PWM with prescaler 1 at PB1
void pwm_init(void)
{
  // PB6, OC1B
  DDRB |= _BV(PB6);
     1da:	26 9a       	sbi	0x04, 6	; 4
	TCCR1A |= _BV(COM1B1) | _BV(WGM10);
     1dc:	e0 e8       	ldi	r30, 0x80	; 128
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	81 62       	ori	r24, 0x21	; 33
     1e4:	80 83       	st	Z, r24
  TCCR1B |= _BV(CS10) | _BV(WGM12); // With WGM12: Fast PWM, without WGM12: Normal PWM
     1e6:	e1 e8       	ldi	r30, 0x81	; 129
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	89 60       	ori	r24, 0x09	; 9
     1ee:	80 83       	st	Z, r24
}
     1f0:	08 95       	ret

000001f2 <timerInit>:

//=====================================================================

void timerInit(void)
{
  cli();
     1f2:	f8 94       	cli
  OCR0A=249; // Counting up to 250, generates 64000 interrupts / sec
     1f4:	89 ef       	ldi	r24, 0xF9	; 249
     1f6:	87 bd       	out	0x27, r24	; 39
  //OCR0B=250; // Counting up to 250, generates 64000 interrupts / sec
	TCCR0A=_BV(WGM01); // CTC mode
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	84 bd       	out	0x24, r24	; 36
  //TCCR0B=_BV(CS01) | _BV(CS00);
  TCCR0B=_BV(CS00); // No prescaler
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	85 bd       	out	0x25, r24	; 37
  //TCCR0B=_BV(CS01); // div8 prescaler
  sei();
     200:	78 94       	sei
}
     202:	08 95       	ret

00000204 <timerStart>:

void timerStart(void)
{
  cli();
     204:	f8 94       	cli
  TCNT0=0;
     206:	16 bc       	out	0x26, r1	; 38
  //TIMSK0 |= _BV(TOIE1);
  TIMSK0 |= _BV(OCIE0A);
     208:	ee e6       	ldi	r30, 0x6E	; 110
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	82 60       	ori	r24, 0x02	; 2
     210:	80 83       	st	Z, r24
  sei();
     212:	78 94       	sei
}
     214:	08 95       	ret

00000216 <seekToTrack>:
}

//=====================================================================

void seekToTrack(uint8_t track)
{
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	00 d0       	rcall	.+0      	; 0x21c <seekToTrack+0x6>
     21c:	00 d0       	rcall	.+0      	; 0x21e <seekToTrack+0x8>
     21e:	00 d0       	rcall	.+0      	; 0x220 <seekToTrack+0xa>
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
  initRead(sampleStart[track]);
     224:	94 e0       	ldi	r25, 0x04	; 4
     226:	89 9f       	mul	r24, r25
     228:	90 01       	movw	r18, r0
     22a:	11 24       	eor	r1, r1
     22c:	3e 83       	std	Y+6, r19	; 0x06
     22e:	2d 83       	std	Y+5, r18	; 0x05
     230:	f9 01       	movw	r30, r18
     232:	e8 5e       	subi	r30, 0xE8	; 232
     234:	fe 4f       	sbci	r31, 0xFE	; 254
     236:	80 81       	ld	r24, Z
     238:	91 81       	ldd	r25, Z+1	; 0x01
     23a:	a2 81       	ldd	r26, Z+2	; 0x02
     23c:	b3 81       	ldd	r27, Z+3	; 0x03
     23e:	89 83       	std	Y+1, r24	; 0x01
     240:	9a 83       	std	Y+2, r25	; 0x02
     242:	ab 83       	std	Y+3, r26	; 0x03
     244:	bc 83       	std	Y+4, r27	; 0x04
     246:	bc 01       	movw	r22, r24
     248:	cd 01       	movw	r24, r26
     24a:	19 d3       	rcall	.+1586   	; 0x87e <initRead>
  sampleCounter=sampleLength[track];
     24c:	ad 81       	ldd	r26, Y+5	; 0x05
     24e:	be 81       	ldd	r27, Y+6	; 0x06
     250:	a8 5f       	subi	r26, 0xF8	; 248
     252:	be 4f       	sbci	r27, 0xFE	; 254
     254:	8d 91       	ld	r24, X+
     256:	9d 91       	ld	r25, X+
     258:	0d 90       	ld	r0, X+
     25a:	bc 91       	ld	r27, X
     25c:	a0 2d       	mov	r26, r0
     25e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <sampleCounter>
     262:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <sampleCounter+0x1>
     266:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <sampleCounter+0x2>
     26a:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <sampleCounter+0x3>
}
     26e:	26 96       	adiw	r28, 0x06	; 6
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	cd bf       	out	0x3d, r28	; 61
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     280:	08 95       	ret

00000282 <EVENT_USB_Device_Disconnect>:
     282:	08 95       	ret

00000284 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     284:	89 e2       	ldi	r24, 0x29	; 41
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	fe c7       	rjmp	.+4092   	; 0x1286 <CDC_Device_ConfigureEndpoints>

0000028a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     28a:	89 e2       	ldi	r24, 0x29	; 41
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <CDC_Device_ProcessControlRequest>

00000292 <EVENT_CDC_Device_ControLineStateChanged>:
	   disable CDC communications in your application when set to avoid the
	   application blocking while waiting for a host to become ready and read
	   in the pending data from the USB endpoints.
	*/
	//bool HostReady = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR) != 0;
}
     292:	08 95       	ret

00000294 <hex2dec>:

//=====================================================================

uint8_t hex2dec(uint8_t ch)
{
     294:	98 2f       	mov	r25, r24
  if (ch>='0' && ch<='9')
     296:	80 ed       	ldi	r24, 0xD0	; 208
     298:	89 0f       	add	r24, r25
     29a:	8a 30       	cpi	r24, 0x0A	; 10
     29c:	70 f0       	brcs	.+28     	; 0x2ba <hex2dec+0x26>
  {
    return ch-'0';
  }
  else if (ch>='a' && ch<='f')
     29e:	8f e9       	ldi	r24, 0x9F	; 159
     2a0:	89 0f       	add	r24, r25
     2a2:	86 30       	cpi	r24, 0x06	; 6
     2a4:	18 f4       	brcc	.+6      	; 0x2ac <hex2dec+0x18>
  {
    return ch-'a'+10;
     2a6:	89 ea       	ldi	r24, 0xA9	; 169
  }
  else if (ch>='A' && ch<='F')
  {
    return ch-'A'+10;
     2a8:	89 0f       	add	r24, r25
     2aa:	08 95       	ret
  else if (ch>='A' && ch<='F')
     2ac:	8f eb       	ldi	r24, 0xBF	; 191
     2ae:	89 0f       	add	r24, r25
     2b0:	86 30       	cpi	r24, 0x06	; 6
     2b2:	10 f4       	brcc	.+4      	; 0x2b8 <hex2dec+0x24>
    return ch-'A'+10;
     2b4:	89 ec       	ldi	r24, 0xC9	; 201
     2b6:	f8 cf       	rjmp	.-16     	; 0x2a8 <hex2dec+0x14>
  }
  else
  {
    return 0;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     2ba:	08 95       	ret

000002bc <get_hex_byte>:

uint8_t get_hex_byte(uint8_t* ptr)
{
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	8c 01       	movw	r16, r24
  return hex2dec(*ptr)*16+hex2dec(*(ptr+1));
     2c4:	fc 01       	movw	r30, r24
     2c6:	80 81       	ld	r24, Z
     2c8:	e5 df       	rcall	.-54     	; 0x294 <hex2dec>
     2ca:	c8 2f       	mov	r28, r24
     2cc:	f8 01       	movw	r30, r16
     2ce:	81 81       	ldd	r24, Z+1	; 0x01
     2d0:	e1 df       	rcall	.-62     	; 0x294 <hex2dec>
     2d2:	c2 95       	swap	r28
     2d4:	c0 7f       	andi	r28, 0xF0	; 240
}
     2d6:	8c 0f       	add	r24, r28
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	08 95       	ret

000002e0 <get_hex_dword>:

uint32_t get_hex_dword(uint8_t* ptr)
{
     2e0:	cf 92       	push	r12
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <get_hex_dword+0x12>
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <get_hex_dword+0x14>
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <get_hex_dword+0x16>
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	8d 83       	std	Y+5, r24	; 0x05
     2fc:	9e 83       	std	Y+6, r25	; 0x06
  uint8_t i;
  uint32_t tmp=0;
  for (i=0; i<8; i+=2)
     2fe:	0d 81       	ldd	r16, Y+5	; 0x05
     300:	1e 81       	ldd	r17, Y+6	; 0x06
     302:	08 5f       	subi	r16, 0xF8	; 248
     304:	1f 4f       	sbci	r17, 0xFF	; 255
  uint32_t tmp=0;
     306:	19 82       	std	Y+1, r1	; 0x01
     308:	1a 82       	std	Y+2, r1	; 0x02
     30a:	1b 82       	std	Y+3, r1	; 0x03
     30c:	1c 82       	std	Y+4, r1	; 0x04
  {
    tmp<<=8;
     30e:	29 81       	ldd	r18, Y+1	; 0x01
     310:	3a 81       	ldd	r19, Y+2	; 0x02
     312:	4b 81       	ldd	r20, Y+3	; 0x03
     314:	5c 81       	ldd	r21, Y+4	; 0x04
     316:	cc 24       	eor	r12, r12
     318:	d2 2e       	mov	r13, r18
     31a:	e3 2e       	mov	r14, r19
     31c:	f4 2e       	mov	r15, r20
    tmp+=get_hex_byte((uint8_t*)ptr+i);
     31e:	8d 81       	ldd	r24, Y+5	; 0x05
     320:	9e 81       	ldd	r25, Y+6	; 0x06
     322:	cc df       	rcall	.-104    	; 0x2bc <get_hex_byte>
     324:	a7 01       	movw	r20, r14
     326:	96 01       	movw	r18, r12
     328:	28 0f       	add	r18, r24
     32a:	31 1d       	adc	r19, r1
     32c:	41 1d       	adc	r20, r1
     32e:	51 1d       	adc	r21, r1
     330:	29 83       	std	Y+1, r18	; 0x01
     332:	3a 83       	std	Y+2, r19	; 0x02
     334:	4b 83       	std	Y+3, r20	; 0x03
     336:	5c 83       	std	Y+4, r21	; 0x04
     338:	4d 81       	ldd	r20, Y+5	; 0x05
     33a:	5e 81       	ldd	r21, Y+6	; 0x06
     33c:	4e 5f       	subi	r20, 0xFE	; 254
     33e:	5f 4f       	sbci	r21, 0xFF	; 255
     340:	5e 83       	std	Y+6, r21	; 0x06
     342:	4d 83       	std	Y+5, r20	; 0x05
  for (i=0; i<8; i+=2)
     344:	40 17       	cp	r20, r16
     346:	51 07       	cpc	r21, r17
     348:	11 f7       	brne	.-60     	; 0x30e <get_hex_dword+0x2e>
  }
  return tmp;
}
     34a:	69 81       	ldd	r22, Y+1	; 0x01
     34c:	7a 81       	ldd	r23, Y+2	; 0x02
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	26 96       	adiw	r28, 0x06	; 6
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	08 95       	ret

00000370 <send_byte_hex>:

void send_byte_hex(uint8_t b)
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	00 d0       	rcall	.+0      	; 0x376 <send_byte_hex+0x6>
     376:	0f 92       	push	r0
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
  uint8_t buf[3];

  buf[0]=b>>4;
     37c:	98 2f       	mov	r25, r24
     37e:	92 95       	swap	r25
     380:	9f 70       	andi	r25, 0x0F	; 15
  if (buf[0]<=9)
     382:	80 3a       	cpi	r24, 0xA0	; 160
     384:	a0 f4       	brcc	.+40     	; 0x3ae <send_byte_hex+0x3e>
  {
    buf[0]+='0';
     386:	90 5d       	subi	r25, 0xD0	; 208
  }
  else
  {
    buf[0]+='A'-10;
     388:	99 83       	std	Y+1, r25	; 0x01
  }
  buf[1]=b&15;
     38a:	8f 70       	andi	r24, 0x0F	; 15
  if (buf[1]<=9)
     38c:	8a 30       	cpi	r24, 0x0A	; 10
     38e:	88 f4       	brcc	.+34     	; 0x3b2 <send_byte_hex+0x42>
  {
    buf[1]+='0';
     390:	80 5d       	subi	r24, 0xD0	; 208
  }
  else
  {
    buf[1]+='A'-10;
     392:	8a 83       	std	Y+2, r24	; 0x02
  }
  buf[2]=0;
     394:	1b 82       	std	Y+3, r1	; 0x03
  CDC_Device_SendString(&VirtualSerial_CDC_Interface, (char*)buf);
     396:	be 01       	movw	r22, r28
     398:	6f 5f       	subi	r22, 0xFF	; 255
     39a:	7f 4f       	sbci	r23, 0xFF	; 255
     39c:	89 e2       	ldi	r24, 0x29	; 41
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	97 d7       	rcall	.+3886   	; 0x12d0 <CDC_Device_SendString>
}
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret
    buf[0]+='A'-10;
     3ae:	99 5c       	subi	r25, 0xC9	; 201
     3b0:	eb cf       	rjmp	.-42     	; 0x388 <send_byte_hex+0x18>
    buf[1]+='A'-10;
     3b2:	89 5c       	subi	r24, 0xC9	; 201
     3b4:	ee cf       	rjmp	.-36     	; 0x392 <send_byte_hex+0x22>

000003b6 <send_lf>:

void send_lf(void)
{
  CDC_Device_SendString(&VirtualSerial_CDC_Interface, "\n");
     3b6:	66 e4       	ldi	r22, 0x46	; 70
     3b8:	71 e0       	ldi	r23, 0x01	; 1
     3ba:	89 e2       	ldi	r24, 0x29	; 41
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	88 c7       	rjmp	.+3856   	; 0x12d0 <CDC_Device_SendString>

000003c0 <send_string>:
}

void send_string(char* str)
{
     3c0:	bc 01       	movw	r22, r24
  CDC_Device_SendString(&VirtualSerial_CDC_Interface, str);
     3c2:	89 e2       	ldi	r24, 0x29	; 41
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	84 c7       	rjmp	.+3848   	; 0x12d0 <CDC_Device_SendString>

000003c8 <main>:
//=====================================================================

int main(void)
{
  static uint8_t ledStep=0;
  USBCON = 0;  // Disable USB interrupts
     3c8:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  spi_init();			//init spi. MODE 3
     3cc:	73 d2       	rcall	.+1254   	; 0x8b4 <spi_init>
  pwm_init();			//fast pwm, prescaler 1
     3ce:	05 df       	rcall	.-502    	; 0x1da <pwm_init>
  buttonInit();
     3d0:	d5 de       	rcall	.-598    	; 0x17c <buttonInit>
  ledInit();
     3d2:	cf de       	rcall	.-610    	; 0x172 <ledInit>
  relayInit();
     3d4:	de de       	rcall	.-580    	; 0x192 <relayInit>
  seekToTrack(0);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	1e df       	rcall	.-452    	; 0x216 <seekToTrack>
     3da:	cb de       	rcall	.-618    	; 0x172 <ledInit>

  ledInit();
     3dc:	f5 de       	rcall	.-534    	; 0x1c8 <pttInit>
     3de:	09 df       	rcall	.-494    	; 0x1f2 <timerInit>
  pttInit();
     3e0:	84 b7       	in	r24, 0x34	; 52
     3e2:	87 7f       	andi	r24, 0xF7	; 247

  timerInit();
     3e4:	84 bf       	out	0x34, r24	; 52
     3e6:	0f b6       	in	r0, 0x3f	; 63
	
  MCUSR &= ~(1 << WDRF);
     3e8:	f8 94       	cli
     3ea:	a8 95       	wdr
     3ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3f0:	88 61       	ori	r24, 0x18	; 24
     3f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3f6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	80 e8       	ldi	r24, 0x80	; 128
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     404:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     408:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	9a d4       	rcall	.+2356   	; 0xd44 <USB_Init>
     410:	6b e5       	ldi	r22, 0x5B	; 91
     412:	71 e0       	ldi	r23, 0x01	; 1
	wdt_disable();
	clock_prescale_set(clock_div_1);
	USB_Init();
     414:	89 e2       	ldi	r24, 0x29	; 41
     416:	91 e0       	ldi	r25, 0x01	; 1
	
  CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     418:	0e 94 3c 0a 	call	0x1478	; 0x1478 <CDC_Device_CreateStream>
     41c:	78 94       	sei
     41e:	f2 de       	rcall	.-540    	; 0x204 <timerStart>
     420:	5f 9a       	sbi	0x0b, 7	; 11
     422:	2f ef       	ldi	r18, 0xFF	; 255
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     424:	39 e6       	ldi	r19, 0x69	; 105
	GlobalInterruptEnable();

  //  ReportString = "Hello, World!\n";
	//  CDC_Device_SendString(&VirtualSerial_CDC_Interface, ReportString);

  timerStart();
     426:	48 e1       	ldi	r20, 0x18	; 24
     428:	21 50       	subi	r18, 0x01	; 1
      PORTD |= _BV(PD7);
     42a:	30 40       	sbci	r19, 0x00	; 0
     42c:	40 40       	sbci	r20, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     430:	00 c0       	rjmp	.+0      	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
     432:	00 00       	nop
     434:	5f 98       	cbi	0x0b, 7	; 11
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	b1 de       	rcall	.-670    	; 0x19c <relay>
     43a:	00 e0       	ldi	r16, 0x00	; 0

  ledSet(0, 1);
  _delay_ms(500);
  ledSet(0, 0);

  relay(RELAY_RX);
     43c:	10 e8       	ldi	r17, 0x80	; 128
     43e:	c0 ea       	ldi	r28, 0xA0	; 160
     440:	df e0       	ldi	r29, 0x0F	; 15
  //  _delay_us (25);		//delay between samples (adjust it to play song fast or slow)
    if (ledFlag)
    {
      uint8_t st;
      ledFlag=0;
      st=(ledPattern[sampleNum] & (1 << (15-ledStep))) != 0;
     442:	ff 24       	eor	r15, r15
     444:	f3 94       	inc	r15
          debounce1=4000;
     446:	89 e2       	ldi	r24, 0x29	; 41
     448:	91 e0       	ldi	r25, 0x01	; 1
          inhibit1=1;
     44a:	dd d7       	rcall	.+4026   	; 0x1406 <CDC_Device_ReceiveByte>
     44c:	9c 01       	movw	r18, r24
	  int16_t ch=CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     44e:	18 16       	cp	r1, r24
     450:	19 06       	cpc	r1, r25
     452:	8c f5       	brge	.+98     	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
     454:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <bufpos>
    if (ch>0)
     458:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <bufpos+0x1>
     45c:	2a 30       	cpi	r18, 0x0A	; 10
      if (ch==10 || ch==13)
     45e:	31 05       	cpc	r19, r1
     460:	21 f0       	breq	.+8      	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
     462:	2d 30       	cpi	r18, 0x0D	; 13
     464:	31 05       	cpc	r19, r1
     466:	09 f0       	breq	.+2      	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
     468:	e2 c0       	rjmp	.+452    	; 0x62e <__FUSE_REGION_LENGTH__+0x22e>
     46a:	00 97       	sbiw	r24, 0x00	; 0
     46c:	01 f1       	breq	.+64     	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
     46e:	83 59       	subi	r24, 0x93	; 147
     470:	9e 4f       	sbci	r25, 0xFE	; 254
     472:	fc 01       	movw	r30, r24
        if (bufpos>0)
     474:	10 82       	st	Z, r1
          buf[bufpos]=0;
     476:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <buf>
     47a:	82 35       	cpi	r24, 0x52	; 82
     47c:	09 f0       	breq	.+2      	; 0x480 <__FUSE_REGION_LENGTH__+0x80>
          if (buf[0]=='R')
     47e:	94 c0       	rjmp	.+296    	; 0x5a8 <__FUSE_REGION_LENGTH__+0x1a8>
     480:	8e e6       	ldi	r24, 0x6E	; 110
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	2d df       	rcall	.-422    	; 0x2e0 <get_hex_dword>
            addr=get_hex_dword((uint8_t*)buf+1);
     486:	3b 01       	movw	r6, r22
     488:	6c 01       	movw	r12, r24
     48a:	86 e7       	ldi	r24, 0x76	; 118
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	28 df       	rcall	.-432    	; 0x2e0 <get_hex_dword>
            numBytes=get_hex_dword((uint8_t*)buf+9);
     490:	4b 01       	movw	r8, r22
     492:	5c 01       	movw	r10, r24
     494:	b3 01       	movw	r22, r6
     496:	c6 01       	movw	r24, r12
     498:	f2 d1       	rcall	.+996    	; 0x87e <initRead>
            initRead(addr);
     49a:	41 2c       	mov	r4, r1
     49c:	51 2c       	mov	r5, r1
     49e:	32 01       	movw	r6, r4
     4a0:	48 14       	cp	r4, r8
            for (i=0; i<numBytes; i++)
     4a2:	59 04       	cpc	r5, r9
     4a4:	6a 04       	cpc	r6, r10
     4a6:	7b 04       	cpc	r7, r11
     4a8:	09 f0       	breq	.+2      	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
     4aa:	76 c0       	rjmp	.+236    	; 0x598 <__FUSE_REGION_LENGTH__+0x198>
     4ac:	84 df       	rcall	.-248    	; 0x3b6 <send_lf>
     4ae:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <bufpos+0x1>
            send_lf();
     4b2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <bufpos>
        bufpos=0;
     4b6:	89 e2       	ldi	r24, 0x29	; 41
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	8d d7       	rcall	.+3866   	; 0x13d6 <CDC_Device_USBTask>
     4bc:	ca d6       	rcall	.+3476   	; 0x1252 <USB_USBTask>
	  CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     4be:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <debounce1>
     4c2:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <debounce1+0x1>
	  USB_USBTask();
     4c6:	89 2b       	or	r24, r25
     4c8:	f1 f4       	brne	.+60     	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
    if (!debounce1)
     4ca:	7c 99       	sbic	0x0f, 4	; 15
     4cc:	c5 c0       	rjmp	.+394    	; 0x658 <__FUSE_REGION_LENGTH__+0x258>
     4ce:	d0 90 4b 01 	lds	r13, 0x014B	; 0x80014b <inhibit1>
     4d2:	d1 10       	cpse	r13, r1
     4d4:	18 c0       	rjmp	.+48     	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
      if (!(PINF & _BV(PF4)))
     4d6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <voiceState>
        if (!inhibit1)
     4da:	d0 93 4f 01 	sts	0x014F, r29	; 0x80014f <debounce1+0x1>
          voice_state_t newState=voiceState;
     4de:	c0 93 4e 01 	sts	0x014E, r28	; 0x80014e <debounce1>
          debounce1=4000;
     4e2:	f0 92 4b 01 	sts	0x014B, r15	; 0x80014b <inhibit1>
     4e6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <voiceState>
          inhibit1=1;
     4ea:	81 11       	cpse	r24, r1
          if (voiceState==STOPPED)
     4ec:	af c0       	rjmp	.+350    	; 0x64c <__FUSE_REGION_LENGTH__+0x24c>
     4ee:	5f 9a       	sbi	0x0b, 7	; 11
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	54 de       	rcall	.-856    	; 0x19c <relay>
      PORTD |= _BV(PD7);
     4f4:	81 e0       	ldi	r24, 0x01	; 1
            relay(RELAY_TX);
     4f6:	6b de       	rcall	.-810    	; 0x1ce <ptt>
     4f8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <sampleNum>
            ptt(1);
     4fc:	8c de       	rcall	.-744    	; 0x216 <seekToTrack>
     4fe:	dd 24       	eor	r13, r13
     500:	d3 94       	inc	r13
            seekToTrack(sampleNum);
     502:	d0 92 49 01 	sts	0x0149, r13	; 0x800149 <voiceState>
     506:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <debounce2>
            newState=RUNNING;
     50a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <debounce2+0x1>
          voiceState=newState;
     50e:	89 2b       	or	r24, r25
     510:	c9 f4       	brne	.+50     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
    if (!debounce2)
     512:	7d 99       	sbic	0x0f, 5	; 15
     514:	a4 c0       	rjmp	.+328    	; 0x65e <__FUSE_REGION_LENGTH__+0x25e>
     516:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <inhibit2>
     51a:	81 11       	cpse	r24, r1
     51c:	13 c0       	rjmp	.+38     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
      if (!(PINF & _BV(PF5)))
     51e:	d0 93 4d 01 	sts	0x014D, r29	; 0x80014d <debounce2+0x1>
        if (!inhibit2)
     522:	c0 93 4c 01 	sts	0x014C, r28	; 0x80014c <debounce2>
     526:	f0 92 4a 01 	sts	0x014A, r15	; 0x80014a <inhibit2>
          debounce2=4000;
     52a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <sampleNum>
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <sampleNum>
          inhibit2=1;
     534:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <samples>
          sampleNum++;
     538:	89 13       	cpse	r24, r25
     53a:	02 c0       	rjmp	.+4      	; 0x540 <__FUSE_REGION_LENGTH__+0x140>
     53c:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <sampleNum>
          if (sampleNum==samples)
     540:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <ledStep.4308>
     544:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <ledFlag>
            sampleNum=0;
     548:	88 23       	and	r24, r24
     54a:	09 f4       	brne	.+2      	; 0x54e <__FUSE_REGION_LENGTH__+0x14e>
          ledStep=0;
     54c:	7c cf       	rjmp	.-264    	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     54e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <ledFlag>
    if (ledFlag)
     552:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <sampleNum>
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	ee 0f       	add	r30, r30
      ledFlag=0;
     55a:	ff 1f       	adc	r31, r31
     55c:	e0 50       	subi	r30, 0x00	; 0
      st=(ledPattern[sampleNum] & (1 << (15-ledStep))) != 0;
     55e:	ff 4f       	sbci	r31, 0xFF	; 255
     560:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ledStep.4308>
     564:	98 01       	movw	r18, r16
     566:	02 c0       	rjmp	.+4      	; 0x56c <__FUSE_REGION_LENGTH__+0x16c>
     568:	36 95       	lsr	r19
     56a:	27 95       	ror	r18
     56c:	8a 95       	dec	r24
     56e:	e2 f7       	brpl	.-8      	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
     570:	c9 01       	movw	r24, r18
     572:	20 81       	ld	r18, Z
     574:	31 81       	ldd	r19, Z+1	; 0x01
     576:	82 23       	and	r24, r18
     578:	93 23       	and	r25, r19
     57a:	89 2b       	or	r24, r25
     57c:	09 f4       	brne	.+2      	; 0x580 <__FUSE_REGION_LENGTH__+0x180>
     57e:	72 c0       	rjmp	.+228    	; 0x664 <__FUSE_REGION_LENGTH__+0x264>
     580:	76 9a       	sbi	0x0e, 6	; 14
     582:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ledStep.4308>
      if (st)
     586:	8f 5f       	subi	r24, 0xFF	; 255
     588:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ledStep.4308>
      }
      else
      {
        ledSet(1, 0);
      }
      ledStep++;
     58c:	8c 30       	cpi	r24, 0x0C	; 12
     58e:	08 f4       	brcc	.+2      	; 0x592 <__FUSE_REGION_LENGTH__+0x192>
     590:	5a cf       	rjmp	.-332    	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     592:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <ledStep.4308>
      if (ledStep>=12)
     596:	57 cf       	rjmp	.-338    	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
      {
        ledStep=0;
     598:	20 d1       	rcall	.+576    	; 0x7da <readSample>
     59a:	ea de       	rcall	.-556    	; 0x370 <send_byte_hex>
     59c:	ff ef       	ldi	r31, 0xFF	; 255
              send_byte_hex(readSample());
     59e:	4f 1a       	sub	r4, r31
     5a0:	5f 0a       	sbc	r5, r31
     5a2:	6f 0a       	sbc	r6, r31
            for (i=0; i<numBytes; i++)
     5a4:	7f 0a       	sbc	r7, r31
     5a6:	7c cf       	rjmp	.-264    	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
     5a8:	87 35       	cpi	r24, 0x57	; 87
     5aa:	41 f5       	brne	.+80     	; 0x5fc <__FUSE_REGION_LENGTH__+0x1fc>
     5ac:	8e e6       	ldi	r24, 0x6E	; 110
     5ae:	91 e0       	ldi	r25, 0x01	; 1
          else if (buf[0]=='W')
     5b0:	97 de       	rcall	.-722    	; 0x2e0 <get_hex_dword>
     5b2:	4b 01       	movw	r8, r22
            addr=get_hex_dword((uint8_t*)buf+1);
     5b4:	6c 01       	movw	r12, r24
     5b6:	86 e7       	ldi	r24, 0x76	; 118
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	92 de       	rcall	.-732    	; 0x2e0 <get_hex_dword>
            numBytes=get_hex_dword((uint8_t*)buf+9);
     5bc:	5b 01       	movw	r10, r22
     5be:	b4 01       	movw	r22, r8
     5c0:	c6 01       	movw	r24, r12
     5c2:	39 d1       	rcall	.+626    	; 0x836 <program_start>
            program_start(addr);
     5c4:	8d e6       	ldi	r24, 0x6D	; 109
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	65 01       	movw	r12, r10
            for (i=0; i<numBytes; i++)
     5ca:	b1 2c       	mov	r11, r1
     5cc:	a1 2c       	mov	r10, r1
     5ce:	4c 01       	movw	r8, r24
     5d0:	32 e0       	ldi	r19, 0x02	; 2
     5d2:	83 0e       	add	r8, r19
     5d4:	91 1c       	adc	r9, r1
     5d6:	ca 14       	cp	r12, r10
     5d8:	db 04       	cpc	r13, r11
     5da:	41 f4       	brne	.+16     	; 0x5ec <__FUSE_REGION_LENGTH__+0x1ec>
     5dc:	4d d1       	rcall	.+666    	; 0x878 <program_end>
            program_end();
     5de:	42 d1       	rcall	.+644    	; 0x864 <write_in_progress>
     5e0:	81 11       	cpse	r24, r1
            while(write_in_progress()); //TODO: Timeout.
     5e2:	fd cf       	rjmp	.-6      	; 0x5de <__FUSE_REGION_LENGTH__+0x1de>
     5e4:	84 e4       	ldi	r24, 0x44	; 68
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	eb de       	rcall	.-554    	; 0x3c0 <send_string>
            send_string("OK\n");
     5ea:	61 cf       	rjmp	.-318    	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
     5ec:	41 96       	adiw	r24, 0x11	; 17
     5ee:	66 de       	rcall	.-820    	; 0x2bc <get_hex_byte>
     5f0:	38 d1       	rcall	.+624    	; 0x862 <program_byte>
              program_byte(get_hex_byte((uint8_t*)buf+17+i*2));
     5f2:	2f ef       	ldi	r18, 0xFF	; 255
     5f4:	a2 1a       	sub	r10, r18
     5f6:	b2 0a       	sbc	r11, r18
     5f8:	c4 01       	movw	r24, r8
     5fa:	e9 cf       	rjmp	.-46     	; 0x5ce <__FUSE_REGION_LENGTH__+0x1ce>
     5fc:	85 34       	cpi	r24, 0x45	; 69
     5fe:	41 f4       	brne	.+16     	; 0x610 <__FUSE_REGION_LENGTH__+0x210>
     600:	8e e6       	ldi	r24, 0x6E	; 110
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	6d de       	rcall	.-806    	; 0x2e0 <get_hex_dword>
          else if (buf[0]=='E')
     606:	fe d0       	rcall	.+508    	; 0x804 <erase_block>
     608:	2d d1       	rcall	.+602    	; 0x864 <write_in_progress>
            addr=get_hex_dword((uint8_t*)buf+1);
     60a:	81 11       	cpse	r24, r1
     60c:	fd cf       	rjmp	.-6      	; 0x608 <__FUSE_REGION_LENGTH__+0x208>
     60e:	ea cf       	rjmp	.-44     	; 0x5e4 <__FUSE_REGION_LENGTH__+0x1e4>
     610:	83 37       	cpi	r24, 0x73	; 115
            erase_block(addr);
     612:	09 f0       	breq	.+2      	; 0x616 <__FUSE_REGION_LENGTH__+0x216>
     614:	4c cf       	rjmp	.-360    	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
            while(write_in_progress()); //TODO: Timeout.
     616:	d1 2c       	mov	r13, r1
     618:	c1 2c       	mov	r12, r1
     61a:	8c 2d       	mov	r24, r12
     61c:	a9 de       	rcall	.-686    	; 0x370 <send_byte_hex>
          else if (buf[0]=='s')
     61e:	4f ef       	ldi	r20, 0xFF	; 255
     620:	c4 1a       	sub	r12, r20
     622:	d4 0a       	sbc	r13, r20
            for (i=0; i<=255; i++)
     624:	c1 14       	cp	r12, r1
     626:	81 e0       	ldi	r24, 0x01	; 1
              send_byte_hex((uint8_t)i);
     628:	d8 06       	cpc	r13, r24
     62a:	b9 f7       	brne	.-18     	; 0x61a <__FUSE_REGION_LENGTH__+0x21a>
     62c:	3f cf       	rjmp	.-386    	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
            for (i=0; i<=255; i++)
     62e:	82 31       	cpi	r24, 0x12	; 18
     630:	e2 e0       	ldi	r30, 0x02	; 2
     632:	9e 07       	cpc	r25, r30
     634:	08 f0       	brcs	.+2      	; 0x638 <__FUSE_REGION_LENGTH__+0x238>
     636:	3f cf       	rjmp	.-386    	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
     638:	fc 01       	movw	r30, r24
     63a:	e3 59       	subi	r30, 0x93	; 147
     63c:	fe 4f       	sbci	r31, 0xFE	; 254
      else if (bufpos<BUFSIZE-2)
     63e:	20 83       	st	Z, r18
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <bufpos+0x1>
     646:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <bufpos>
        buf[bufpos]=(uint8_t)ch;
     64a:	35 cf       	rjmp	.-406    	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	a6 dd       	rcall	.-1204   	; 0x19c <relay>
        bufpos++;
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	bd dd       	rcall	.-1158   	; 0x1ce <ptt>
     654:	5f 98       	cbi	0x0b, 7	; 11
     656:	55 cf       	rjmp	.-342    	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
     658:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <inhibit1>
            relay(RELAY_RX);
     65c:	54 cf       	rjmp	.-344    	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
     65e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <inhibit2>
            ptt(0);
     662:	70 cf       	rjmp	.-288    	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
     664:	76 98       	cbi	0x0e, 6	; 14
     666:	8d cf       	rjmp	.-230    	; 0x582 <__FUSE_REGION_LENGTH__+0x182>

00000668 <__vector_21>:
      PORTD &= ~_BV(PD7);
     668:	1f 92       	push	r1
     66a:	0f 92       	push	r0
        inhibit1=0;
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	0f 92       	push	r0
     670:	11 24       	eor	r1, r1
        inhibit2=0;
     672:	2f 93       	push	r18
     674:	3f 93       	push	r19
     676:	4f 93       	push	r20
      PORTE &= ~_BV(PE6);
     678:	5f 93       	push	r21
}
     67a:	6f 93       	push	r22
//=====================================================================

volatile uint8_t intCnt=0;
//ISR(TIMER0_OVF_vect)
ISR(TIMER0_COMPA_vect) //64 kHz
{
     67c:	7f 93       	push	r23
     67e:	8f 93       	push	r24
     680:	9f 93       	push	r25
     682:	af 93       	push	r26
     684:	bf 93       	push	r27
     686:	cf 93       	push	r28
     688:	ef 93       	push	r30
     68a:	ff 93       	push	r31
  if (ledCounter>0)
     68c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <ledCounter>
     690:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <ledCounter+0x1>
     694:	89 2b       	or	r24, r25
     696:	09 f4       	brne	.+2      	; 0x69a <__vector_21+0x32>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__vector_21+0x10e>
  {
    ledCounter--;
     69a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <ledCounter>
     69e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <ledCounter+0x1>
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <ledCounter+0x1>
     6a8:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <ledCounter>
  else
  {
    ledCounter=ledTimeout;
    ledFlag=1;
  }
  if (intCnt==1)
     6ac:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <__vector_21+0x4e>
     6b4:	8c c0       	rjmp	.+280    	; 0x7ce <__vector_21+0x166>
  {
    voice_state_t newState=voiceState;
     6b6:	c0 91 49 01 	lds	r28, 0x0149	; 0x800149 <voiceState>
    if (voiceState==RUNNING)
     6ba:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <voiceState>
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <__vector_21+0x5c>
     6c2:	63 c0       	rjmp	.+198    	; 0x78a <__vector_21+0x122>
    {
      OCR1B = readSample(); //read spi data and send to
     6c4:	8a d0       	rcall	.+276    	; 0x7da <readSample>
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     6cc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
      if (sampleCounter==0)
     6d0:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <sampleCounter>
     6d4:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <sampleCounter+0x1>
     6d8:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <sampleCounter+0x2>
     6dc:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <sampleCounter+0x3>
     6e0:	89 2b       	or	r24, r25
     6e2:	8a 2b       	or	r24, r26
     6e4:	8b 2b       	or	r24, r27
     6e6:	99 f4       	brne	.+38     	; 0x70e <__vector_21+0xa6>
      {
        seekToTrack(sampleNum);
     6e8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <sampleNum>
     6ec:	94 dd       	rcall	.-1240   	; 0x216 <seekToTrack>
        newState=WAITING;
        waitCycles=120000;
     6ee:	80 ec       	ldi	r24, 0xC0	; 192
     6f0:	94 ed       	ldi	r25, 0xD4	; 212
     6f2:	a1 e0       	ldi	r26, 0x01	; 1
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <waitCycles>
     6fa:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <waitCycles+0x1>
     6fe:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <waitCycles+0x2>
     702:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <waitCycles+0x3>
        ptt(0);
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	62 dd       	rcall	.-1340   	; 0x1ce <ptt>
      PORTD &= ~_BV(PD7);
     70a:	5f 98       	cbi	0x0b, 7	; 11
        newState=WAITING;
     70c:	c2 e0       	ldi	r28, 0x02	; 2
        newState=RUNNING;
        ptt(1);
        ledSet(0, 1);
      }
    }
    voiceState=newState;
     70e:	c0 93 49 01 	sts	0x0149, r28	; 0x800149 <voiceState>

    if (debounce1)
     712:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <debounce1>
     716:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <debounce1+0x1>
     71a:	89 2b       	or	r24, r25
     71c:	49 f0       	breq	.+18     	; 0x730 <__vector_21+0xc8>
    {
      debounce1--;
     71e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <debounce1>
     722:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <debounce1+0x1>
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <debounce1+0x1>
     72c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <debounce1>
    }
    if (debounce2)
     730:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <debounce2>
     734:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <debounce2+0x1>
     738:	89 2b       	or	r24, r25
     73a:	49 f0       	breq	.+18     	; 0x74e <__vector_21+0xe6>
    {
      debounce2--;
     73c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <debounce2>
     740:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <debounce2+0x1>
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <debounce2+0x1>
     74a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <debounce2>
    }
    intCnt=0;
     74e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
  }
  else
  {
    intCnt++;
  }
}
     752:	ff 91       	pop	r31
     754:	ef 91       	pop	r30
     756:	cf 91       	pop	r28
     758:	bf 91       	pop	r27
     75a:	af 91       	pop	r26
     75c:	9f 91       	pop	r25
     75e:	8f 91       	pop	r24
     760:	7f 91       	pop	r23
     762:	6f 91       	pop	r22
     764:	5f 91       	pop	r21
     766:	4f 91       	pop	r20
     768:	3f 91       	pop	r19
     76a:	2f 91       	pop	r18
     76c:	0f 90       	pop	r0
     76e:	0f be       	out	0x3f, r0	; 63
     770:	0f 90       	pop	r0
     772:	1f 90       	pop	r1
     774:	18 95       	reti
    ledCounter=ledTimeout;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e2       	ldi	r25, 0x20	; 32
     77a:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <ledCounter+0x1>
     77e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <ledCounter>
    ledFlag=1;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <ledFlag>
     788:	91 cf       	rjmp	.-222    	; 0x6ac <__vector_21+0x44>
    else if (voiceState==WAITING)
     78a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <voiceState>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	09 f0       	breq	.+2      	; 0x794 <__vector_21+0x12c>
     792:	bd cf       	rjmp	.-134    	; 0x70e <__vector_21+0xa6>
      waitCycles--;
     794:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <waitCycles>
     798:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <waitCycles+0x1>
     79c:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <waitCycles+0x2>
     7a0:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <waitCycles+0x3>
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	a1 09       	sbc	r26, r1
     7a8:	b1 09       	sbc	r27, r1
     7aa:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <waitCycles>
     7ae:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <waitCycles+0x1>
     7b2:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <waitCycles+0x2>
     7b6:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <waitCycles+0x3>
      if (waitCycles==0)
     7ba:	89 2b       	or	r24, r25
     7bc:	8a 2b       	or	r24, r26
     7be:	8b 2b       	or	r24, r27
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <__vector_21+0x15c>
        ptt(1);
     7c2:	a5 cf       	rjmp	.-182    	; 0x70e <__vector_21+0xa6>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	03 dd       	rcall	.-1530   	; 0x1ce <ptt>
      PORTD |= _BV(PD7);
     7c8:	5f 9a       	sbi	0x0b, 7	; 11
        newState=RUNNING;
     7ca:	c1 e0       	ldi	r28, 0x01	; 1
     7cc:	a0 cf       	rjmp	.-192    	; 0x70e <__vector_21+0xa6>
    intCnt++;
     7ce:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     7d2:	8f 5f       	subi	r24, 0xFF	; 255
     7d4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
}
     7d8:	bc cf       	rjmp	.-136    	; 0x752 <__vector_21+0xea>

000007da <readSample>:
#include "spi.h"
#include "flash.h"

uint8_t readSample()
{
  sampleCounter--;
     7da:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <sampleCounter>
     7de:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <sampleCounter+0x1>
     7e2:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <sampleCounter+0x2>
     7e6:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <sampleCounter+0x3>
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	a1 09       	sbc	r26, r1
     7ee:	b1 09       	sbc	r27, r1
     7f0:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <sampleCounter>
     7f4:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <sampleCounter+0x1>
     7f8:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <sampleCounter+0x2>
     7fc:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <sampleCounter+0x3>
  return spi_transmit_receive(0xff);
     800:	8f ef       	ldi	r24, 0xFF	; 255
     802:	5f c0       	rjmp	.+190    	; 0x8c2 <spi_transmit_receive>

00000804 <erase_block>:
}

void erase_block(uint32_t addr)
{
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	eb 01       	movw	r28, r22
     80c:	18 2f       	mov	r17, r24
  deselect_chip();
     80e:	58 9a       	sbi	0x0b, 0	; 11
  select_chip();
     810:	58 98       	cbi	0x0b, 0	; 11
  spi_transmit_receive(0x06);	//enable write
     812:	86 e0       	ldi	r24, 0x06	; 6
     814:	56 d0       	rcall	.+172    	; 0x8c2 <spi_transmit_receive>

  deselect_chip();
     816:	58 9a       	sbi	0x0b, 0	; 11
  select_chip();
     818:	58 98       	cbi	0x0b, 0	; 11
  spi_transmit_receive (0xd8);	//block erase (64k or 256k)
     81a:	88 ed       	ldi	r24, 0xD8	; 216
     81c:	52 d0       	rcall	.+164    	; 0x8c2 <spi_transmit_receive>
  spi_transmit_receive((addr >> 16) & 0xff);	//address msB
     81e:	81 2f       	mov	r24, r17
     820:	50 d0       	rcall	.+160    	; 0x8c2 <spi_transmit_receive>
  spi_transmit_receive((addr >>  8) & 0xff);
     822:	8d 2f       	mov	r24, r29
     824:	4e d0       	rcall	.+156    	; 0x8c2 <spi_transmit_receive>
  spi_transmit_receive( addr        & 0xff);	//address lsB
     826:	8c 2f       	mov	r24, r28
     828:	4c d0       	rcall	.+152    	; 0x8c2 <spi_transmit_receive>
     82a:	58 9a       	sbi	0x0b, 0	; 11
  deselect_chip();
     82c:	58 98       	cbi	0x0b, 0	; 11
  select_chip();
     82e:	df 91       	pop	r29
}
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	08 95       	ret

00000836 <program_start>:
     836:	1f 93       	push	r17

void program_start(uint32_t addr)
{
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	eb 01       	movw	r28, r22
     83e:	18 2f       	mov	r17, r24
  deselect_chip();
     840:	58 9a       	sbi	0x0b, 0	; 11
  select_chip();
     842:	58 98       	cbi	0x0b, 0	; 11
  spi_transmit_receive(0x06);	//enable write
     844:	86 e0       	ldi	r24, 0x06	; 6
     846:	3d d0       	rcall	.+122    	; 0x8c2 <spi_transmit_receive>
  
  deselect_chip();
     848:	58 9a       	sbi	0x0b, 0	; 11
  select_chip();
     84a:	58 98       	cbi	0x0b, 0	; 11
  spi_transmit_receive (0x02);	//page program
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	39 d0       	rcall	.+114    	; 0x8c2 <spi_transmit_receive>
  spi_transmit_receive((addr >> 16) & 0xff);	//address msB
     850:	81 2f       	mov	r24, r17
     852:	37 d0       	rcall	.+110    	; 0x8c2 <spi_transmit_receive>
  spi_transmit_receive((addr >>  8) & 0xff);
     854:	8d 2f       	mov	r24, r29
     856:	35 d0       	rcall	.+106    	; 0x8c2 <spi_transmit_receive>
     858:	8c 2f       	mov	r24, r28
  spi_transmit_receive( addr        & 0xff);	//address lsB
}
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
  spi_transmit_receive( addr        & 0xff);	//address lsB
     860:	30 c0       	rjmp	.+96     	; 0x8c2 <spi_transmit_receive>

00000862 <program_byte>:
     862:	2f c0       	rjmp	.+94     	; 0x8c2 <spi_transmit_receive>

00000864 <write_in_progress>:
}

uint8_t write_in_progress(void)
{
  uint8_t busy;
  deselect_chip();
     864:	58 9a       	sbi	0x0b, 0	; 11
  select_chip();
     866:	58 98       	cbi	0x0b, 0	; 11
  spi_transmit_receive(0x05);	//read status register
     868:	85 e0       	ldi	r24, 0x05	; 5
     86a:	2b d0       	rcall	.+86     	; 0x8c2 <spi_transmit_receive>
  busy=spi_transmit_receive(0xff) & 1;
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	29 d0       	rcall	.+82     	; 0x8c2 <spi_transmit_receive>
  deselect_chip();
     870:	58 9a       	sbi	0x0b, 0	; 11
  select_chip();
     872:	58 98       	cbi	0x0b, 0	; 11
  return busy;
}
     874:	81 70       	andi	r24, 0x01	; 1
     876:	08 95       	ret

00000878 <program_end>:

void program_end()
{
  deselect_chip();
     878:	58 9a       	sbi	0x0b, 0	; 11
  select_chip();
     87a:	58 98       	cbi	0x0b, 0	; 11
  //spi_transmit_receive(0x04);	//disable write
  //deselect_chip();
  //select_chip();
}
     87c:	08 95       	ret

0000087e <initRead>:

  deselect_chip ();
}

void initRead(uint32_t startAddr)
{
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	eb 01       	movw	r28, r22
     886:	18 2f       	mov	r17, r24
  deselect_chip();
     888:	58 9a       	sbi	0x0b, 0	; 11
  select_chip();
     88a:	58 98       	cbi	0x0b, 0	; 11
  spi_transmit_receive(0x03);	//initiate read from the address
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	19 d0       	rcall	.+50     	; 0x8c2 <spi_transmit_receive>
  spi_transmit_receive((startAddr >> 16) & 0xff);	//address msB
     890:	81 2f       	mov	r24, r17
     892:	17 d0       	rcall	.+46     	; 0x8c2 <spi_transmit_receive>
  spi_transmit_receive((startAddr >>  8) & 0xff);
     894:	8d 2f       	mov	r24, r29
     896:	15 d0       	rcall	.+42     	; 0x8c2 <spi_transmit_receive>
  spi_transmit_receive( startAddr        & 0xff);	//address lsB
     898:	8c 2f       	mov	r24, r28
     89a:	13 d0       	rcall	.+38     	; 0x8c2 <spi_transmit_receive>
     89c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <sampleCounter>
  sampleCounter=0;
     8a0:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <sampleCounter+0x1>
     8a4:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <sampleCounter+0x2>
     8a8:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <sampleCounter+0x3>
     8ac:	df 91       	pop	r29
}
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <spi_init>:
#include "spi.h"

//initialize bitbanged SPI
void spi_init()
{
  deselect_chip ();
     8b4:	58 9a       	sbi	0x0b, 0	; 11
  SPI_DDR = (MOSI_PIN) | (SCK_PIN);
     8b6:	86 e0       	ldi	r24, 0x06	; 6
     8b8:	84 b9       	out	0x04, r24	; 4
  SPI_CS_DDR = (CS_PIN);
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	8a b9       	out	0x0a, r24	; 10
  SPI_SCK_HIGH ();
     8be:	29 9a       	sbi	0x05, 1	; 5
}
     8c0:	08 95       	ret

000008c2 <spi_transmit_receive>:

//=====================================================================

uint8_t spi_transmit_receive (uint8_t c)
{
     8c2:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++)
  {
    if (c & (1 << 7))
     8c4:	87 ff       	sbrs	r24, 7
     8c6:	09 c0       	rjmp	.+18     	; 0x8da <spi_transmit_receive+0x18>
    {
      SPI_MOSI_HIGH ();
     8c8:	2a 9a       	sbi	0x05, 2	; 5
    }
    else
    {
      SPI_MOSI_LOW ();
    }
    SPI_SCK_LOW ();
     8ca:	29 98       	cbi	0x05, 1	; 5
    c <<= 1;
     8cc:	88 0f       	add	r24, r24
    if (read_miso ())
     8ce:	1b 99       	sbic	0x03, 3	; 3
    {
      c |= 1;
     8d0:	81 60       	ori	r24, 0x01	; 1
    }
    SPI_SCK_HIGH ();
     8d2:	29 9a       	sbi	0x05, 1	; 5
     8d4:	91 50       	subi	r25, 0x01	; 1
  for (i = 0; i < 8; i++)
     8d6:	b1 f7       	brne	.-20     	; 0x8c4 <spi_transmit_receive+0x2>
  }
  return c;
}
     8d8:	08 95       	ret
      SPI_MOSI_LOW ();
     8da:	2a 98       	cbi	0x05, 2	; 5
     8dc:	f6 cf       	rjmp	.-20     	; 0x8ca <spi_transmit_receive+0x8>

000008de <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
     8de:	9c 01       	movw	r18, r24
     8e0:	da 01       	movw	r26, r20
	const uint8_t  DescriptorType   = (wValue >> 8);
     8e2:	83 2f       	mov	r24, r19
     8e4:	99 27       	eor	r25, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	91 05       	cpc	r25, r1
     8ea:	29 f1       	breq	.+74     	; 0x936 <CALLBACK_USB_GetDescriptor+0x58>
     8ec:	83 30       	cpi	r24, 0x03	; 3
     8ee:	91 05       	cpc	r25, r1
     8f0:	49 f0       	breq	.+18     	; 0x904 <CALLBACK_USB_GetDescriptor+0x26>
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	91 f4       	brne	.+36     	; 0x91a <CALLBACK_USB_GetDescriptor+0x3c>
     8f6:	82 e1       	ldi	r24, 0x12	; 18
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	26 e2       	ldi	r18, 0x26	; 38
     8fc:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     8fe:	2d 93       	st	X+, r18
     900:	3c 93       	st	X, r19
	return Size;
}
     902:	08 95       	ret
			switch (DescriptorNumber)
     904:	c9 01       	movw	r24, r18
     906:	99 27       	eor	r25, r25
     908:	21 30       	cpi	r18, 0x01	; 1
     90a:	61 f0       	breq	.+24     	; 0x924 <CALLBACK_USB_GetDescriptor+0x46>
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	91 05       	cpc	r25, r1
     910:	79 f0       	breq	.+30     	; 0x930 <CALLBACK_USB_GetDescriptor+0x52>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     912:	e4 ee       	ldi	r30, 0xE4	; 228
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	89 2b       	or	r24, r25
     918:	39 f0       	breq	.+14     	; 0x928 <CALLBACK_USB_GetDescriptor+0x4a>
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	ed cf       	rjmp	.-38     	; 0x8fe <CALLBACK_USB_GetDescriptor+0x20>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     924:	ea ec       	ldi	r30, 0xCA	; 202
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	84 91       	lpm	r24, Z
     92a:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ManufacturerString;
     92c:	9f 01       	movw	r18, r30
					break;
     92e:	e7 cf       	rjmp	.-50     	; 0x8fe <CALLBACK_USB_GetDescriptor+0x20>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     930:	ec ea       	ldi	r30, 0xAC	; 172
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	f9 cf       	rjmp	.-14     	; 0x928 <CALLBACK_USB_GetDescriptor+0x4a>
			Size    = sizeof(USB_Descriptor_Configuration_t);
     936:	8e e3       	ldi	r24, 0x3E	; 62
     938:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     93a:	28 ee       	ldi	r18, 0xE8	; 232
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	df cf       	rjmp	.-66     	; 0x8fe <CALLBACK_USB_GetDescriptor+0x20>

00000940 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     940:	af 92       	push	r10
     942:	bf 92       	push	r11
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	6c 01       	movw	r12, r24
     954:	eb 01       	movw	r28, r22
     956:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     958:	84 d1       	rcall	.+776    	; 0xc62 <Endpoint_WaitUntilReady>
     95a:	f8 2e       	mov	r15, r24
     95c:	81 11       	cpse	r24, r1
     95e:	23 c0       	rjmp	.+70     	; 0x9a6 <Endpoint_Write_Stream_LE+0x66>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     960:	01 15       	cp	r16, r1
     962:	11 05       	cpc	r17, r1
     964:	39 f0       	breq	.+14     	; 0x974 <Endpoint_Write_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
     966:	f8 01       	movw	r30, r16
     968:	80 81       	ld	r24, Z
     96a:	91 81       	ldd	r25, Z+1	; 0x01
     96c:	c8 1b       	sub	r28, r24
     96e:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     970:	c8 0e       	add	r12, r24
     972:	d9 1e       	adc	r13, r25
{
     974:	b1 2c       	mov	r11, r1
     976:	a1 2c       	mov	r10, r1
	}

	while (Length)
     978:	20 97       	sbiw	r28, 0x00	; 0
     97a:	a9 f0       	breq	.+42     	; 0x9a6 <Endpoint_Write_Stream_LE+0x66>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     97c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     980:	85 fd       	sbrc	r24, 5
     982:	21 c0       	rjmp	.+66     	; 0x9c6 <Endpoint_Write_Stream_LE+0x86>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     984:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     988:	8e 77       	andi	r24, 0x7E	; 126
     98a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     98e:	01 15       	cp	r16, r1
     990:	11 05       	cpc	r17, r1
     992:	a1 f0       	breq	.+40     	; 0x9bc <Endpoint_Write_Stream_LE+0x7c>
			{
				*BytesProcessed += BytesInTransfer;
     994:	f8 01       	movw	r30, r16
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	a8 0e       	add	r10, r24
     99c:	b9 1e       	adc	r11, r25
     99e:	b1 82       	std	Z+1, r11	; 0x01
     9a0:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     9a2:	85 e0       	ldi	r24, 0x05	; 5
     9a4:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     9a6:	8f 2d       	mov	r24, r15
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	df 90       	pop	r13
     9b4:	cf 90       	pop	r12
     9b6:	bf 90       	pop	r11
     9b8:	af 90       	pop	r10
			if ((ErrorCode = Endpoint_WaitUntilReady()))
     9ba:	08 95       	ret
     9bc:	52 d1       	rcall	.+676    	; 0xc62 <Endpoint_WaitUntilReady>
     9be:	88 23       	and	r24, r24
     9c0:	d9 f2       	breq	.-74     	; 0x978 <Endpoint_Write_Stream_LE+0x38>
     9c2:	f8 2e       	mov	r15, r24
     9c4:	f0 cf       	rjmp	.-32     	; 0x9a6 <Endpoint_Write_Stream_LE+0x66>
			TEMPLATE_TRANSFER_BYTE(DataStream);
     9c6:	f6 01       	movw	r30, r12
     9c8:	81 91       	ld	r24, Z+
     9ca:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9cc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Length--;
     9d0:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     9d2:	ff ef       	ldi	r31, 0xFF	; 255
     9d4:	af 1a       	sub	r10, r31
     9d6:	bf 0a       	sbc	r11, r31
     9d8:	cf cf       	rjmp	.-98     	; 0x978 <Endpoint_Write_Stream_LE+0x38>

000009da <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     9da:	fc 01       	movw	r30, r24
     9dc:	cb 01       	movw	r24, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     9de:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <USB_ControlRequest+0x6>
     9e2:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <USB_ControlRequest+0x7>
     9e6:	26 17       	cp	r18, r22
     9e8:	37 07       	cpc	r19, r23
     9ea:	90 f0       	brcs	.+36     	; 0xa10 <Endpoint_Write_Control_Stream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     9ec:	00 97       	sbiw	r24, 0x00	; 0
     9ee:	29 f4       	brne	.+10     	; 0x9fa <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9f0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9f4:	2e 77       	andi	r18, 0x7E	; 126
     9f6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9fa:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	51 f4       	brne	.+20     	; 0xa14 <Endpoint_Write_Control_Stream_LE+0x3a>
     a00:	41 11       	cpse	r20, r1
     a02:	08 c0       	rjmp	.+16     	; 0xa14 <Endpoint_Write_Control_Stream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a08:	82 ff       	sbrs	r24, 2
     a0a:	31 c0       	rjmp	.+98     	; 0xa6e <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret
     a10:	c9 01       	movw	r24, r18
     a12:	f3 cf       	rjmp	.-26     	; 0x9fa <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a14:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a18:	22 23       	and	r18, r18
     a1a:	a9 f1       	breq	.+106    	; 0xa86 <Endpoint_Write_Control_Stream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a1c:	25 30       	cpi	r18, 0x05	; 5
     a1e:	a9 f1       	breq	.+106    	; 0xa8a <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a20:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     a24:	23 fd       	sbrc	r18, 3
     a26:	2d c0       	rjmp	.+90     	; 0xa82 <Endpoint_Write_Control_Stream_LE+0xa8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a28:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
     a2c:	22 fd       	sbrc	r18, 2
     a2e:	ea cf       	rjmp	.-44     	; 0xa04 <Endpoint_Write_Control_Stream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a30:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
     a34:	20 ff       	sbrs	r18, 0
     a36:	e2 cf       	rjmp	.-60     	; 0x9fc <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     a38:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     a3c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	19 f0       	breq	.+6      	; 0xa4a <Endpoint_Write_Control_Stream_LE+0x70>
     a44:	28 30       	cpi	r18, 0x08	; 8
     a46:	31 05       	cpc	r19, r1
     a48:	58 f0       	brcs	.+22     	; 0xa60 <Endpoint_Write_Control_Stream_LE+0x86>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	28 30       	cpi	r18, 0x08	; 8
     a4e:	31 05       	cpc	r19, r1
     a50:	09 f0       	breq	.+2      	; 0xa54 <Endpoint_Write_Control_Stream_LE+0x7a>
     a52:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a54:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a58:	2e 77       	andi	r18, 0x7E	; 126
     a5a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
     a5e:	ce cf       	rjmp	.-100    	; 0x9fc <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a60:	41 91       	ld	r20, Z+
				UEDATX = Data;
     a62:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
     a66:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
     a68:	2f 5f       	subi	r18, 0xFF	; 255
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	e9 cf       	rjmp	.-46     	; 0xa40 <Endpoint_Write_Control_Stream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a6e:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a72:	88 23       	and	r24, r24
     a74:	41 f0       	breq	.+16     	; 0xa86 <Endpoint_Write_Control_Stream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a76:	85 30       	cpi	r24, 0x05	; 5
     a78:	41 f0       	breq	.+16     	; 0xa8a <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     a7e:	83 ff       	sbrs	r24, 3
     a80:	c1 cf       	rjmp	.-126    	; 0xa04 <Endpoint_Write_Control_Stream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a82:	81 e0       	ldi	r24, 0x01	; 1
}
     a84:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	08 95       	ret

00000a8e <Endpoint_Write_Control_PStream_LE>:
{
     a8e:	fc 01       	movw	r30, r24
     a90:	cb 01       	movw	r24, r22
	if (Length > USB_ControlRequest.wLength)
     a92:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <USB_ControlRequest+0x6>
     a96:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <USB_ControlRequest+0x7>
     a9a:	26 17       	cp	r18, r22
     a9c:	37 07       	cpc	r19, r23
     a9e:	90 f0       	brcs	.+36     	; 0xac4 <Endpoint_Write_Control_PStream_LE+0x36>
	else if (!(Length))
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	29 f4       	brne	.+10     	; 0xaae <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aa4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     aa8:	2e 77       	andi	r18, 0x7E	; 126
     aaa:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     aae:	40 e0       	ldi	r20, 0x00	; 0
	while (Length || LastPacketFull)
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	51 f4       	brne	.+20     	; 0xac8 <Endpoint_Write_Control_PStream_LE+0x3a>
     ab4:	41 11       	cpse	r20, r1
     ab6:	08 c0       	rjmp	.+16     	; 0xac8 <Endpoint_Write_Control_PStream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ab8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
     abc:	82 ff       	sbrs	r24, 2
     abe:	32 c0       	rjmp	.+100    	; 0xb24 <__stack+0x25>
	return ENDPOINT_RWCSTREAM_NoError;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 95       	ret
     ac4:	c9 01       	movw	r24, r18
     ac6:	f3 cf       	rjmp	.-26     	; 0xaae <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ac8:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     acc:	22 23       	and	r18, r18
     ace:	b1 f1       	breq	.+108    	; 0xb3c <__stack+0x3d>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ad0:	25 30       	cpi	r18, 0x05	; 5
     ad2:	b1 f1       	breq	.+108    	; 0xb40 <__stack+0x41>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ad4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     ad8:	23 fd       	sbrc	r18, 3
     ada:	2e c0       	rjmp	.+92     	; 0xb38 <__stack+0x39>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     adc:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
     ae0:	22 fd       	sbrc	r18, 2
     ae2:	ea cf       	rjmp	.-44     	; 0xab8 <Endpoint_Write_Control_PStream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ae4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
     ae8:	20 ff       	sbrs	r18, 0
     aea:	e2 cf       	rjmp	.-60     	; 0xab0 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     aec:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     af0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	19 f0       	breq	.+6      	; 0xafe <Endpoint_Write_Control_PStream_LE+0x70>
     af8:	28 30       	cpi	r18, 0x08	; 8
     afa:	31 05       	cpc	r19, r1
     afc:	58 f0       	brcs	.+22     	; 0xb14 <__stack+0x15>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     afe:	41 e0       	ldi	r20, 0x01	; 1
     b00:	28 30       	cpi	r18, 0x08	; 8
     b02:	31 05       	cpc	r19, r1
     b04:	09 f0       	breq	.+2      	; 0xb08 <__stack+0x9>
     b06:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b08:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b0c:	2e 77       	andi	r18, 0x7E	; 126
     b0e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
     b12:	ce cf       	rjmp	.-100    	; 0xab0 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b14:	44 91       	lpm	r20, Z
				UEDATX = Data;
     b16:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     b1a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     b1c:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
     b1e:	2f 5f       	subi	r18, 0xFF	; 255
     b20:	3f 4f       	sbci	r19, 0xFF	; 255
     b22:	e8 cf       	rjmp	.-48     	; 0xaf4 <Endpoint_Write_Control_PStream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b24:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b28:	88 23       	and	r24, r24
     b2a:	41 f0       	breq	.+16     	; 0xb3c <__stack+0x3d>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b2c:	85 30       	cpi	r24, 0x05	; 5
     b2e:	41 f0       	breq	.+16     	; 0xb40 <__stack+0x41>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     b34:	83 ff       	sbrs	r24, 3
     b36:	c0 cf       	rjmp	.-128    	; 0xab8 <Endpoint_Write_Control_PStream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     b38:	81 e0       	ldi	r24, 0x01	; 1
}
     b3a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     b40:	83 e0       	ldi	r24, 0x03	; 3
     b42:	08 95       	ret

00000b44 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     b44:	98 2f       	mov	r25, r24
     b46:	97 30       	cpi	r25, 0x07	; 7
     b48:	28 f0       	brcs	.+10     	; 0xb54 <Endpoint_ConfigureEndpoint_Prv+0x10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b4a:	8f 70       	andi	r24, 0x0F	; 15
     b4c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	08 95       	ret
     b54:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UECFG1XTemp = UECFG1XData;
     b58:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
     b5a:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
     b5c:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
     b5e:	98 17       	cp	r25, r24
     b60:	31 f0       	breq	.+12     	; 0xb6e <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
     b62:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			UECFG1XTemp = UECFG1X;
     b66:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			UEIENXTemp  = UEIENX;
     b6a:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
     b6e:	21 fd       	sbrc	r18, 1
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     b72:	9f 5f       	subi	r25, 0xFF	; 255
     b74:	e8 cf       	rjmp	.-48     	; 0xb46 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     b76:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b7a:	3e 7f       	andi	r19, 0xFE	; 254
     b7c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG1X &= ~(1 << ALLOC);
     b80:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     b84:	3d 7f       	andi	r19, 0xFD	; 253
     b86:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
				UECONX |= (1 << EPEN);
     b8a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b8e:	31 60       	ori	r19, 0x01	; 1
     b90:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = UECFG0XTemp;
     b94:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = UECFG1XTemp;
     b98:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX  = UEIENXTemp;
     b9c:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     ba0:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		if (!(Endpoint_IsConfigured()))
     ba4:	27 fd       	sbrc	r18, 7
     ba6:	e5 cf       	rjmp	.-54     	; 0xb72 <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
     ba8:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
     baa:	08 95       	ret

00000bac <Endpoint_ConfigureEndpointTable>:
{
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	16 2f       	mov	r17, r22
	for (uint8_t i = 0; i < Entries; i++)
     bb6:	ec 01       	movw	r28, r24
     bb8:	00 e0       	ldi	r16, 0x00	; 0
     bba:	01 13       	cpse	r16, r17
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <Endpoint_ConfigureEndpointTable+0x16>
	return true;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0b c0       	rjmp	.+22     	; 0xbd8 <Endpoint_ConfigureEndpointTable+0x2c>
		if (!(Table[i].Address))
     bc2:	98 81       	ld	r25, Y
     bc4:	91 11       	cpse	r25, r1
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <Endpoint_ConfigureEndpointTable+0x22>
	for (uint8_t i = 0; i < Entries; i++)
     bc8:	0f 5f       	subi	r16, 0xFF	; 255
     bca:	25 96       	adiw	r28, 0x05	; 5
     bcc:	f6 cf       	rjmp	.-20     	; 0xbba <Endpoint_ConfigureEndpointTable+0xe>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     bce:	89 2f       	mov	r24, r25
     bd0:	8f 70       	andi	r24, 0x0F	; 15
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     bd2:	87 30       	cpi	r24, 0x07	; 7
     bd4:	30 f0       	brcs	.+12     	; 0xbe2 <Endpoint_ConfigureEndpointTable+0x36>
		  return false;
     bd6:	80 e0       	ldi	r24, 0x00	; 0
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
     be2:	2c 81       	ldd	r18, Y+4	; 0x04
     be4:	42 e0       	ldi	r20, 0x02	; 2
     be6:	22 30       	cpi	r18, 0x02	; 2
     be8:	08 f0       	brcs	.+2      	; 0xbec <Endpoint_ConfigureEndpointTable+0x40>
     bea:	46 e0       	ldi	r20, 0x06	; 6
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     bec:	e9 81       	ldd	r30, Y+1	; 0x01
     bee:	fa 81       	ldd	r31, Y+2	; 0x02
				uint16_t CheckBytes = 8;
     bf0:	68 e0       	ldi	r22, 0x08	; 8
     bf2:	70 e0       	ldi	r23, 0x00	; 0
				uint8_t  MaskVal    = 0;
     bf4:	20 e0       	ldi	r18, 0x00	; 0
				while (CheckBytes < Bytes)
     bf6:	6e 17       	cp	r22, r30
     bf8:	7f 07       	cpc	r23, r31
     bfa:	80 f0       	brcs	.+32     	; 0xc1c <Endpoint_ConfigureEndpointTable+0x70>
				return (MaskVal << EPSIZE0);
     bfc:	22 95       	swap	r18
     bfe:	20 7f       	andi	r18, 0xF0	; 240
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
     c00:	42 2b       	or	r20, r18
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     c02:	6b 81       	ldd	r22, Y+3	; 0x03
     c04:	20 e4       	ldi	r18, 0x40	; 64
     c06:	62 9f       	mul	r22, r18
     c08:	b0 01       	movw	r22, r0
     c0a:	11 24       	eor	r1, r1
     c0c:	99 1f       	adc	r25, r25
     c0e:	99 27       	eor	r25, r25
     c10:	99 1f       	adc	r25, r25
     c12:	69 2b       	or	r22, r25
				return Endpoint_ConfigureEndpoint_Prv(Number,
     c14:	97 df       	rcall	.-210    	; 0xb44 <Endpoint_ConfigureEndpoint_Prv>
     c16:	81 11       	cpse	r24, r1
     c18:	d7 cf       	rjmp	.-82     	; 0xbc8 <Endpoint_ConfigureEndpointTable+0x1c>
     c1a:	dd cf       	rjmp	.-70     	; 0xbd6 <Endpoint_ConfigureEndpointTable+0x2a>
					MaskVal++;
     c1c:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     c1e:	66 0f       	add	r22, r22
     c20:	77 1f       	adc	r23, r23
     c22:	e9 cf       	rjmp	.-46     	; 0xbf6 <Endpoint_ConfigureEndpointTable+0x4a>

00000c24 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     c24:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <USB_ControlRequest>
     c28:	87 ff       	sbrs	r24, 7
     c2a:	13 c0       	rjmp	.+38     	; 0xc52 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     c30:	82 ff       	sbrs	r24, 2
     c32:	06 c0       	rjmp	.+12     	; 0xc40 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c38:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c40:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>
     c44:	81 11       	cpse	r24, r1
     c46:	f2 cf       	rjmp	.-28     	; 0xc2c <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
     c48:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c4a:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>
     c4e:	88 23       	and	r24, r24
     c50:	d9 f3       	breq	.-10     	; 0xc48 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
     c56:	80 ff       	sbrs	r24, 0
     c58:	f8 cf       	rjmp	.-16     	; 0xc4a <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c5e:	8e 77       	andi	r24, 0x7E	; 126
     c60:	ec cf       	rjmp	.-40     	; 0xc3a <Endpoint_ClearStatusStage+0x16>

00000c62 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     c62:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     c66:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     c6a:	95 e6       	ldi	r25, 0x65	; 101
     c6c:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c6e:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     c72:	82 2f       	mov	r24, r18
     c74:	81 70       	andi	r24, 0x01	; 1
     c76:	20 ff       	sbrs	r18, 0
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <Endpoint_WaitUntilReady+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     c7e:	80 ff       	sbrs	r24, 0
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_NoError;
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c86:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c8a:	22 fd       	sbrc	r18, 2
     c8c:	1a c0       	rjmp	.+52     	; 0xcc2 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c8e:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c92:	88 23       	and	r24, r24
     c94:	89 f0       	breq	.+34     	; 0xcb8 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c96:	85 30       	cpi	r24, 0x05	; 5
     c98:	89 f0       	breq	.+34     	; 0xcbc <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c9a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     c9e:	85 fd       	sbrc	r24, 5
     ca0:	0f c0       	rjmp	.+30     	; 0xcc0 <Endpoint_WaitUntilReady+0x5e>
     ca2:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     ca6:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     caa:	42 17       	cp	r20, r18
     cac:	53 07       	cpc	r21, r19
     cae:	f9 f2       	breq	.-66     	; 0xc6e <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     cb0:	91 50       	subi	r25, 0x01	; 1
     cb2:	e1 f6       	brne	.-72     	; 0xc6c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
     cc2:	08 95       	ret

00000cc4 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     ccc:	4b d0       	rcall	.+150    	; 0xd64 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cce:	52 d0       	rcall	.+164    	; 0xd74 <USB_INT_ClearAllInterrupts>
     cd0:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     cd2:	d0 e0       	ldi	r29, 0x00	; 0
     cd4:	88 81       	ld	r24, Y
     cd6:	8f 77       	andi	r24, 0x7F	; 127
     cd8:	88 83       	st	Y, r24
     cda:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     cdc:	80 68       	ori	r24, 0x80	; 128
     cde:	88 83       	st	Y, r24
     ce0:	88 81       	ld	r24, Y
				USBCON &= ~(1 << FRZCLK);
     ce2:	8f 7d       	andi	r24, 0xDF	; 223
     ce4:	88 83       	st	Y, r24
     ce6:	19 bc       	out	0x29, r1	; 41
				PLLCSR = 0;
     ce8:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     cec:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     cf0:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     cf4:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     cf8:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 81       	ld	r24, Z
     d00:	8b 7f       	andi	r24, 0xFB	; 251
     d02:	80 83       	st	Z, r24
     d04:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     d06:	81 60       	ori	r24, 0x01	; 1
     d08:	88 83       	st	Y, r24
     d0a:	42 e0       	ldi	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	19 df       	rcall	.-462    	; 0xb44 <Endpoint_ConfigureEndpoint_Prv>
     d12:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	8e 7f       	andi	r24, 0xFE	; 254
     d1a:	80 83       	st	Z, r24
     d1c:	e2 ee       	ldi	r30, 0xE2	; 226
						UDIEN  |= (1 << SUSPE);
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	81 60       	ori	r24, 0x01	; 1
     d24:	80 83       	st	Z, r24
     d26:	80 81       	ld	r24, Z
						UDIEN  |= (1 << EORSTE);
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	80 83       	st	Z, r24
     d2c:	f8 01       	movw	r30, r16
				UDCON  &= ~(1 << DETACH);
     d2e:	80 81       	ld	r24, Z
     d30:	8e 7f       	andi	r24, 0xFE	; 254
     d32:	80 83       	st	Z, r24
     d34:	88 81       	ld	r24, Y
				USBCON |=  (1 << OTGPADE);
     d36:	80 61       	ori	r24, 0x10	; 16
     d38:	88 83       	st	Y, r24
     d3a:	df 91       	pop	r29
}
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	08 95       	ret

00000d44 <USB_Init>:
     d44:	e8 ed       	ldi	r30, 0xD8	; 216
				USBCON &= ~(1 << OTGPADE);
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	8f 7e       	andi	r24, 0xEF	; 239
     d4c:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
     d4e:	e7 ed       	ldi	r30, 0xD7	; 215
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <USB_IsInitialized>
	USB_ResetInterface();
     d62:	b0 cf       	rjmp	.-160    	; 0xcc4 <USB_ResetInterface>

00000d64 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     d64:	e8 ed       	ldi	r30, 0xD8	; 216
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8e 7f       	andi	r24, 0xFE	; 254
     d6c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d6e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
     d72:	08 95       	ret

00000d74 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d74:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d78:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
     d7c:	08 95       	ret

00000d7e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     da0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     da4:	82 ff       	sbrs	r24, 2
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
     da8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     dac:	82 ff       	sbrs	r24, 2
     dae:	06 c0       	rjmp	.+12     	; 0xdbc <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
     db0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     db4:	8b 7f       	andi	r24, 0xFB	; 251
     db6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     dba:	4a d2       	rcall	.+1172   	; 0x1250 <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
     dbc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     dc0:	80 ff       	sbrs	r24, 0
     dc2:	18 c0       	rjmp	.+48     	; 0xdf4 <__vector_10+0x76>
						return (USBCON & (1 << VBUSTE));
     dc4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     dc8:	80 ff       	sbrs	r24, 0
     dca:	14 c0       	rjmp	.+40     	; 0xdf4 <__vector_10+0x76>
						USBINT &= ~(1 << VBUSTI);
     dcc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     dd0:	8e 7f       	andi	r24, 0xFE	; 254
     dd2:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     dd6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     dda:	80 ff       	sbrs	r24, 0
     ddc:	8f c0       	rjmp	.+286    	; 0xefc <__vector_10+0x17e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dde:	80 e1       	ldi	r24, 0x10	; 16
     de0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     de2:	82 e1       	ldi	r24, 0x12	; 18
     de4:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     de6:	09 b4       	in	r0, 0x29	; 41
     de8:	00 fe       	sbrs	r0, 0
     dea:	fd cf       	rjmp	.-6      	; 0xde6 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     df2:	46 da       	rcall	.-2932   	; 0x280 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
     df4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     df8:	80 ff       	sbrs	r24, 0
     dfa:	18 c0       	rjmp	.+48     	; 0xe2c <__vector_10+0xae>
						return (UDIEN  & (1 << SUSPE));
     dfc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e00:	80 ff       	sbrs	r24, 0
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <__vector_10+0xae>
						UDIEN  &= ~(1 << SUSPE);
     e04:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e08:	8e 7f       	andi	r24, 0xFE	; 254
     e0a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
     e0e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e12:	80 61       	ori	r24, 0x10	; 16
     e14:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     e18:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e1c:	80 62       	ori	r24, 0x20	; 32
     e1e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
     e22:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     e24:	85 e0       	ldi	r24, 0x05	; 5
     e26:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     e2a:	12 d2       	rcall	.+1060   	; 0x1250 <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
     e2c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     e30:	84 ff       	sbrs	r24, 4
     e32:	28 c0       	rjmp	.+80     	; 0xe84 <__vector_10+0x106>
						return (UDIEN  & (1 << WAKEUPE));
     e34:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e38:	84 ff       	sbrs	r24, 4
     e3a:	24 c0       	rjmp	.+72     	; 0xe84 <__vector_10+0x106>
				PLLCSR = USB_PLL_PSC;
     e3c:	80 e1       	ldi	r24, 0x10	; 16
     e3e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e40:	82 e1       	ldi	r24, 0x12	; 18
     e42:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e44:	09 b4       	in	r0, 0x29	; 41
     e46:	00 fe       	sbrs	r0, 0
     e48:	fd cf       	rjmp	.-6      	; 0xe44 <__vector_10+0xc6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e4a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e4e:	8f 7d       	andi	r24, 0xDF	; 223
     e50:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
     e54:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e58:	8f 7e       	andi	r24, 0xEF	; 239
     e5a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
     e5e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e62:	8f 7e       	andi	r24, 0xEF	; 239
     e64:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
     e68:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     e72:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <USB_Device_ConfigurationNumber>
     e76:	88 23       	and	r24, r24
     e78:	09 f4       	brne	.+2      	; 0xe7c <__vector_10+0xfe>
     e7a:	45 c0       	rjmp	.+138    	; 0xf06 <__vector_10+0x188>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     e82:	e6 d1       	rcall	.+972    	; 0x1250 <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
     e84:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     e88:	83 ff       	sbrs	r24, 3
     e8a:	27 c0       	rjmp	.+78     	; 0xeda <__vector_10+0x15c>
						return (UDIEN  & (1 << EORSTE));
     e8c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e90:	83 ff       	sbrs	r24, 3
     e92:	23 c0       	rjmp	.+70     	; 0xeda <__vector_10+0x15c>
						UDINT  &= ~(1 << EORSTI);
     e94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e98:	87 7f       	andi	r24, 0xF7	; 247
     e9a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     ea4:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
     ea8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     eac:	8e 7f       	andi	r24, 0xFE	; 254
     eae:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
     eb2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     eb6:	8e 7f       	andi	r24, 0xFE	; 254
     eb8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
     ebc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ec6:	42 e0       	ldi	r20, 0x02	; 2
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	3b de       	rcall	.-906    	; 0xb44 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
     ece:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     ed2:	88 60       	ori	r24, 0x08	; 8
     ed4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     ed8:	bb d1       	rcall	.+886    	; 0x1250 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	bf 91       	pop	r27
     ee0:	af 91       	pop	r26
     ee2:	9f 91       	pop	r25
     ee4:	8f 91       	pop	r24
     ee6:	7f 91       	pop	r23
     ee8:	6f 91       	pop	r22
     eea:	5f 91       	pop	r21
     eec:	4f 91       	pop	r20
     eee:	3f 91       	pop	r19
     ef0:	2f 91       	pop	r18
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
				PLLCSR = 0;
     efa:	18 95       	reti
			USB_DeviceState = DEVICE_STATE_Unattached;
     efc:	19 bc       	out	0x29, r1	; 41
     efe:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     f02:	bf d9       	rcall	.-3202   	; 0x282 <EVENT_USB_Device_Disconnect>
     f04:	77 cf       	rjmp	.-274    	; 0xdf4 <__vector_10+0x76>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f06:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     f0a:	87 fd       	sbrc	r24, 7
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <__vector_10+0x194>
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	b6 cf       	rjmp	.-148    	; 0xe7e <__vector_10+0x100>
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	b4 cf       	rjmp	.-152    	; 0xe7e <__vector_10+0x100>

00000f16 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	ef 93       	push	r30
     f3a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f3c:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     f40:	df 70       	andi	r29, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f42:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     f46:	c8 2f       	mov	r28, r24
     f48:	c1 70       	andi	r28, 0x01	; 1
     f4a:	80 fd       	sbrc	r24, 0
     f4c:	c0 e8       	ldi	r28, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f4e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
     f52:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     f56:	87 7f       	andi	r24, 0xF7	; 247
     f58:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     f5c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     f5e:	1e d0       	rcall	.+60     	; 0xf9c <USB_Device_ProcessControlRequest>
     f60:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
     f64:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     f68:	88 60       	ori	r24, 0x08	; 8
     f6a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f6e:	cd 2b       	or	r28, r29
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f70:	cf 70       	andi	r28, 0x0F	; 15
     f72:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     f76:	ff 91       	pop	r31
     f78:	ef 91       	pop	r30
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	bf 91       	pop	r27
     f80:	af 91       	pop	r26
     f82:	9f 91       	pop	r25
     f84:	8f 91       	pop	r24
     f86:	7f 91       	pop	r23
     f88:	6f 91       	pop	r22
     f8a:	5f 91       	pop	r21
     f8c:	4f 91       	pop	r20
     f8e:	3f 91       	pop	r19
     f90:	2f 91       	pop	r18
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	0f 90       	pop	r0
     f98:	1f 90       	pop	r1
     f9a:	18 95       	reti

00000f9c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	aa 97       	sbiw	r28, 0x2a	; 42
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     fb2:	86 e8       	ldi	r24, 0x86	; 134
     fb4:	93 e0       	ldi	r25, 0x03	; 3

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     fb6:	fc 01       	movw	r30, r24
     fb8:	01 96       	adiw	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fba:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     fbe:	20 83       	st	Z, r18
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     fc0:	23 e0       	ldi	r18, 0x03	; 3
     fc2:	8e 38       	cpi	r24, 0x8E	; 142
     fc4:	92 07       	cpc	r25, r18
     fc6:	b9 f7       	brne	.-18     	; 0xfb6 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
     fc8:	60 d9       	rcall	.-3392   	; 0x28a <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     fce:	83 ff       	sbrs	r24, 3
     fd0:	10 c0       	rjmp	.+32     	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     fd2:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     fd6:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <USB_ControlRequest+0x1>
     fda:	95 30       	cpi	r25, 0x05	; 5
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <USB_Device_ProcessControlRequest+0x44>
     fde:	c2 c0       	rjmp	.+388    	; 0x1164 <USB_Device_ProcessControlRequest+0x1c8>
     fe0:	00 f5       	brcc	.+64     	; 0x1022 <USB_Device_ProcessControlRequest+0x86>
     fe2:	29 2f       	mov	r18, r25
     fe4:	2d 7f       	andi	r18, 0xFD	; 253
     fe6:	21 30       	cpi	r18, 0x01	; 1
     fe8:	09 f4       	brne	.+2      	; 0xfec <USB_Device_ProcessControlRequest+0x50>
     fea:	89 c0       	rjmp	.+274    	; 0x10fe <USB_Device_ProcessControlRequest+0x162>
     fec:	99 23       	and	r25, r25
     fee:	09 f4       	brne	.+2      	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
     ff0:	5e c0       	rjmp	.+188    	; 0x10ae <USB_Device_ProcessControlRequest+0x112>
     ff2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     ff6:	83 ff       	sbrs	r24, 3
     ff8:	0a c0       	rjmp	.+20     	; 0x100e <USB_Device_ProcessControlRequest+0x72>
				UEINTX &= ~(1 << RXSTPI);
     ffa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ffe:	87 7f       	andi	r24, 0xF7	; 247
    1000:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    1004:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1008:	80 62       	ori	r24, 0x20	; 32
    100a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    100e:	aa 96       	adiw	r28, 0x2a	; 42
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
    1022:	98 30       	cpi	r25, 0x08	; 8
    1024:	09 f4       	brne	.+2      	; 0x1028 <USB_Device_ProcessControlRequest+0x8c>
    1026:	d5 c0       	rjmp	.+426    	; 0x11d2 <USB_Device_ProcessControlRequest+0x236>
    1028:	99 30       	cpi	r25, 0x09	; 9
    102a:	09 f4       	brne	.+2      	; 0x102e <USB_Device_ProcessControlRequest+0x92>
    102c:	df c0       	rjmp	.+446    	; 0x11ec <USB_Device_ProcessControlRequest+0x250>
    102e:	96 30       	cpi	r25, 0x06	; 6
    1030:	01 f7       	brne	.-64     	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1032:	80 58       	subi	r24, 0x80	; 128
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	e8 f6       	brcc	.-70     	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1038:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <USB_ControlRequest+0x2>
    103c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <USB_ControlRequest+0x3>
    1040:	8c 3d       	cpi	r24, 0xDC	; 220
    1042:	23 e0       	ldi	r18, 0x03	; 3
    1044:	92 07       	cpc	r25, r18
    1046:	09 f0       	breq	.+2      	; 0x104a <USB_Device_ProcessControlRequest+0xae>
    1048:	af c0       	rjmp	.+350    	; 0x11a8 <USB_Device_ProcessControlRequest+0x20c>
	SignatureDescriptor.Header.Type = DTYPE_String;
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    104e:	8a e2       	ldi	r24, 0x2A	; 42
    1050:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1052:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1054:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1056:	de 01       	movw	r26, r28
    1058:	13 96       	adiw	r26, 0x03	; 3
    105a:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    105c:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    105e:	51 e2       	ldi	r21, 0x21	; 33
    1060:	e3 2f       	mov	r30, r19
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1068:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    106a:	20 ff       	sbrs	r18, 0
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <USB_Device_ProcessControlRequest+0xd8>
					{
						SerialByte >>= 4;
    106e:	e2 95       	swap	r30
    1070:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1072:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1074:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1076:	8e 2f       	mov	r24, r30
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	ea 30       	cpi	r30, 0x0A	; 10
    107c:	08 f4       	brcc	.+2      	; 0x1080 <USB_Device_ProcessControlRequest+0xe4>
    107e:	92 c0       	rjmp	.+292    	; 0x11a4 <USB_Device_ProcessControlRequest+0x208>
    1080:	c7 96       	adiw	r24, 0x37	; 55
    1082:	8d 93       	st	X+, r24
    1084:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1086:	2f 5f       	subi	r18, 0xFF	; 255
    1088:	24 31       	cpi	r18, 0x14	; 20
    108a:	51 f7       	brne	.-44     	; 0x1060 <USB_Device_ProcessControlRequest+0xc4>
				SREG = GlobalIntState;
    108c:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    108e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1092:	87 7f       	andi	r24, 0xF7	; 247
    1094:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1098:	6a e2       	ldi	r22, 0x2A	; 42
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	ce 01       	movw	r24, r28
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	9c dc       	rcall	.-1736   	; 0x9da <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10a6:	8b 77       	andi	r24, 0x7B	; 123
    10a8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ac:	a2 cf       	rjmp	.-188    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10ae:	80 38       	cpi	r24, 0x80	; 128
    10b0:	99 f0       	breq	.+38     	; 0x10d8 <USB_Device_ProcessControlRequest+0x13c>
    10b2:	82 38       	cpi	r24, 0x82	; 130
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <USB_Device_ProcessControlRequest+0x11c>
    10b6:	9d cf       	rjmp	.-198    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10b8:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <USB_ControlRequest+0x4>
    10bc:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    10be:	87 30       	cpi	r24, 0x07	; 7
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <USB_Device_ProcessControlRequest+0x128>
    10c2:	97 cf       	rjmp	.-210    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    10c8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    10cc:	85 fb       	bst	r24, 5
    10ce:	88 27       	eor	r24, r24
    10d0:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10d2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <USB_Device_ProcessControlRequest+0x148>
	uint8_t CurrentStatus = 0;
    10d8:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    10dc:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <USB_Device_RemoteWakeupEnabled>
    10e0:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    10e2:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    10e4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10e8:	97 7f       	andi	r25, 0xF7	; 247
    10ea:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    10ee:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    10f2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10fa:	8e 77       	andi	r24, 0x7E	; 126
    10fc:	a5 c0       	rjmp	.+330    	; 0x1248 <USB_Device_ProcessControlRequest+0x2ac>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10fe:	88 23       	and	r24, r24
    1100:	09 f4       	brne	.+2      	; 0x1104 <USB_Device_ProcessControlRequest+0x168>
    1102:	92 c0       	rjmp	.+292    	; 0x1228 <USB_Device_ProcessControlRequest+0x28c>
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	09 f0       	breq	.+2      	; 0x110a <USB_Device_ProcessControlRequest+0x16e>
    1108:	74 cf       	rjmp	.-280    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    110a:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <USB_ControlRequest+0x2>
    110e:	81 11       	cpse	r24, r1
    1110:	96 c0       	rjmp	.+300    	; 0x123e <USB_Device_ProcessControlRequest+0x2a2>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1112:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <USB_ControlRequest+0x4>
    1116:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1118:	2f ef       	ldi	r18, 0xFF	; 255
    111a:	28 0f       	add	r18, r24
    111c:	26 30       	cpi	r18, 0x06	; 6
    111e:	08 f0       	brcs	.+2      	; 0x1122 <USB_Device_ProcessControlRequest+0x186>
    1120:	68 cf       	rjmp	.-304    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1122:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1126:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    112a:	20 ff       	sbrs	r18, 0
    112c:	88 c0       	rjmp	.+272    	; 0x123e <USB_Device_ProcessControlRequest+0x2a2>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    112e:	93 30       	cpi	r25, 0x03	; 3
    1130:	31 f4       	brne	.+12     	; 0x113e <USB_Device_ProcessControlRequest+0x1a2>
				UECONX |= (1 << STALLRQ);
    1132:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1136:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1138:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			}
    113c:	80 c0       	rjmp	.+256    	; 0x123e <USB_Device_ProcessControlRequest+0x2a2>
				UECONX |= (1 << STALLRQC);
    113e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1142:	90 61       	ori	r25, 0x10	; 16
    1144:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1148:	21 e0       	ldi	r18, 0x01	; 1
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <USB_Device_ProcessControlRequest+0x1b4>
    114e:	22 0f       	add	r18, r18
    1150:	8a 95       	dec	r24
    1152:	ea f7       	brpl	.-6      	; 0x114e <USB_Device_ProcessControlRequest+0x1b2>
    1154:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1158:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    115c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1160:	88 60       	ori	r24, 0x08	; 8
    1162:	ea cf       	rjmp	.-44     	; 0x1138 <USB_Device_ProcessControlRequest+0x19c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1164:	81 11       	cpse	r24, r1
    1166:	45 cf       	rjmp	.-374    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1168:	10 91 88 03 	lds	r17, 0x0388	; 0x800388 <USB_ControlRequest+0x2>
    116c:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    116e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1172:	80 78       	andi	r24, 0x80	; 128
    1174:	81 2b       	or	r24, r17
    1176:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    117a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    117e:	87 7f       	andi	r24, 0xF7	; 247
    1180:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1184:	4f dd       	rcall	.-1378   	; 0xc24 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1186:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    118a:	80 ff       	sbrs	r24, 0
    118c:	fc cf       	rjmp	.-8      	; 0x1186 <USB_Device_ProcessControlRequest+0x1ea>
				UDADDR |= (1 << ADDEN);
    118e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1192:	80 68       	ori	r24, 0x80	; 128
    1194:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	11 11       	cpse	r17, r1
    119c:	83 e0       	ldi	r24, 0x03	; 3
    119e:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <USB_DeviceState>
}
    11a2:	27 cf       	rjmp	.-434    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    11a4:	c0 96       	adiw	r24, 0x30	; 48
    11a6:	6d cf       	rjmp	.-294    	; 0x1082 <USB_Device_ProcessControlRequest+0xe6>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    11a8:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <USB_ControlRequest+0x4>
    11ac:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <USB_ControlRequest+0x5>
    11b0:	ae 01       	movw	r20, r28
    11b2:	4f 5f       	subi	r20, 0xFF	; 255
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	93 db       	rcall	.-2266   	; 0x8de <CALLBACK_USB_GetDescriptor>
    11b8:	bc 01       	movw	r22, r24
    11ba:	89 2b       	or	r24, r25
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <USB_Device_ProcessControlRequest+0x224>
    11be:	19 cf       	rjmp	.-462    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
				UEINTX &= ~(1 << RXSTPI);
    11c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11c4:	87 7f       	andi	r24, 0xF7	; 247
    11c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	9a 81       	ldd	r25, Y+2	; 0x02
    11ce:	5f dc       	rcall	.-1858   	; 0xa8e <Endpoint_Write_Control_PStream_LE>
    11d0:	68 cf       	rjmp	.-304    	; 0x10a2 <USB_Device_ProcessControlRequest+0x106>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    11d2:	80 38       	cpi	r24, 0x80	; 128
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <USB_Device_ProcessControlRequest+0x23c>
    11d6:	0d cf       	rjmp	.-486    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
    11d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11dc:	87 7f       	andi	r24, 0xF7	; 247
    11de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    11e2:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    11e6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    11ea:	85 cf       	rjmp	.-246    	; 0x10f6 <USB_Device_ProcessControlRequest+0x15a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    11ec:	81 11       	cpse	r24, r1
    11ee:	01 cf       	rjmp	.-510    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    11f0:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <USB_ControlRequest+0x2>
    11f4:	92 30       	cpi	r25, 0x02	; 2
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <USB_Device_ProcessControlRequest+0x25e>
    11f8:	fc ce       	rjmp	.-520    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
				UEINTX &= ~(1 << RXSTPI);
    11fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11fe:	87 7f       	andi	r24, 0xF7	; 247
    1200:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1204:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    1208:	0d dd       	rcall	.-1510   	; 0xc24 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    120a:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <USB_Device_ConfigurationNumber>
    120e:	88 23       	and	r24, r24
    1210:	11 f0       	breq	.+4      	; 0x1216 <USB_Device_ProcessControlRequest+0x27a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1212:	84 e0       	ldi	r24, 0x04	; 4
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <USB_Device_ProcessControlRequest+0x284>
				return (UDADDR & (1 << ADDEN));
    1216:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    121a:	87 fd       	sbrc	r24, 7
    121c:	fa cf       	rjmp	.-12     	; 0x1212 <USB_Device_ProcessControlRequest+0x276>
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1224:	2f d8       	rcall	.-4002   	; 0x284 <EVENT_USB_Device_ConfigurationChanged>
    1226:	e5 ce       	rjmp	.-566    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1228:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <USB_ControlRequest+0x2>
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	09 f0       	breq	.+2      	; 0x1232 <USB_Device_ProcessControlRequest+0x296>
    1230:	e0 ce       	rjmp	.-576    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	93 30       	cpi	r25, 0x03	; 3
    1236:	09 f0       	breq	.+2      	; 0x123a <USB_Device_ProcessControlRequest+0x29e>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    123e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1242:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1246:	87 7f       	andi	r24, 0xF7	; 247
    1248:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    124c:	eb dc       	rcall	.-1578   	; 0xc24 <Endpoint_ClearStatusStage>
    124e:	d1 ce       	rjmp	.-606    	; 0xff2 <USB_Device_ProcessControlRequest+0x56>

00001250 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1250:	08 95       	ret

00001252 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1252:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1254:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>
    1258:	88 23       	and	r24, r24
    125a:	99 f0       	breq	.+38     	; 0x1282 <USB_USBTask+0x30>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    125c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1260:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1262:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1266:	89 2f       	mov	r24, r25
    1268:	81 70       	andi	r24, 0x01	; 1
    126a:	90 fd       	sbrc	r25, 0
    126c:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    126e:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1270:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1274:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1278:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    127a:	90 de       	rcall	.-736    	; 0xf9c <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    127c:	cf 70       	andi	r28, 0x0F	; 15
    127e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    128c:	fc 01       	movw	r30, r24
    128e:	70 96       	adiw	r30, 0x10	; 16
    1290:	8b e0       	ldi	r24, 0x0B	; 11
    1292:	df 01       	movw	r26, r30
    1294:	1d 92       	st	X+, r1
    1296:	8a 95       	dec	r24
    1298:	e9 f7       	brne	.-6      	; 0x1294 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    129e:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	ce 01       	movw	r24, r28
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	80 dc       	rcall	.-1792   	; 0xbac <Endpoint_ConfigureEndpointTable>
    12ac:	88 23       	and	r24, r24
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <CDC_Device_ConfigureEndpoints+0x42>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	ce 01       	movw	r24, r28
    12b4:	06 96       	adiw	r24, 0x06	; 6
    12b6:	7a dc       	rcall	.-1804   	; 0xbac <Endpoint_ConfigureEndpointTable>
    12b8:	88 23       	and	r24, r24
    12ba:	31 f0       	breq	.+12     	; 0x12c8 <CDC_Device_ConfigureEndpoints+0x42>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	ce 01       	movw	r24, r28
    12c0:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	return true;
}
    12c2:	df 91       	pop	r29
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    12c4:	cf 91       	pop	r28
    12c6:	72 cc       	rjmp	.-1820   	; 0xbac <Endpoint_ConfigureEndpointTable>
}
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <CDC_Device_SendString>:
	#endif
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
    12d0:	fc 01       	movw	r30, r24
    12d2:	cb 01       	movw	r24, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    12d4:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <USB_DeviceState>
    12d8:	24 30       	cpi	r18, 0x04	; 4
    12da:	b9 f4       	brne	.+46     	; 0x130a <CDC_Device_SendString+0x3a>
    12dc:	44 89       	ldd	r20, Z+20	; 0x14
    12de:	55 89       	ldd	r21, Z+21	; 0x15
    12e0:	66 89       	ldd	r22, Z+22	; 0x16
    12e2:	77 89       	ldd	r23, Z+23	; 0x17
    12e4:	45 2b       	or	r20, r21
    12e6:	46 2b       	or	r20, r22
    12e8:	47 2b       	or	r20, r23
    12ea:	79 f0       	breq	.+30     	; 0x130a <CDC_Device_SendString+0x3a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12ec:	21 81       	ldd	r18, Z+1	; 0x01
    12ee:	2f 70       	andi	r18, 0x0F	; 15
    12f0:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
    12f4:	fc 01       	movw	r30, r24
    12f6:	01 90       	ld	r0, Z+
    12f8:	00 20       	and	r0, r0
    12fa:	e9 f7       	brne	.-6      	; 0x12f6 <CDC_Device_SendString+0x26>
    12fc:	31 97       	sbiw	r30, 0x01	; 1
    12fe:	bf 01       	movw	r22, r30
    1300:	68 1b       	sub	r22, r24
    1302:	79 0b       	sbc	r23, r25
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	1b cb       	rjmp	.-2506   	; 0x940 <Endpoint_Write_Stream_LE>
}
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	08 95       	ret

0000130e <CDC_Device_SendByte>:
	return Endpoint_Write_PStream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    130e:	cf 93       	push	r28
    1310:	fc 01       	movw	r30, r24
    1312:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1314:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>
    1318:	84 30       	cpi	r24, 0x04	; 4
    131a:	f1 f4       	brne	.+60     	; 0x1358 <CDC_Device_SendByte+0x4a>
    131c:	84 89       	ldd	r24, Z+20	; 0x14
    131e:	95 89       	ldd	r25, Z+21	; 0x15
    1320:	a6 89       	ldd	r26, Z+22	; 0x16
    1322:	b7 89       	ldd	r27, Z+23	; 0x17
    1324:	89 2b       	or	r24, r25
    1326:	8a 2b       	or	r24, r26
    1328:	8b 2b       	or	r24, r27
    132a:	b1 f0       	breq	.+44     	; 0x1358 <CDC_Device_SendByte+0x4a>
    132c:	81 81       	ldd	r24, Z+1	; 0x01
    132e:	8f 70       	andi	r24, 0x0F	; 15
    1330:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1334:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    1338:	85 ff       	sbrs	r24, 5
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <CDC_Device_SendByte+0x38>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    133c:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1340:	80 e0       	ldi	r24, 0x00	; 0
}
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1346:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    134a:	8e 77       	andi	r24, 0x7E	; 126
    134c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1350:	88 dc       	rcall	.-1776   	; 0xc62 <Endpoint_WaitUntilReady>
    1352:	88 23       	and	r24, r24
    1354:	99 f3       	breq	.-26     	; 0x133c <CDC_Device_SendByte+0x2e>
    1356:	f5 cf       	rjmp	.-22     	; 0x1342 <CDC_Device_SendByte+0x34>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	f3 cf       	rjmp	.-26     	; 0x1342 <CDC_Device_SendByte+0x34>

0000135c <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    135c:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    135e:	68 2f       	mov	r22, r24
    1360:	84 85       	ldd	r24, Z+12	; 0x0c
    1362:	95 85       	ldd	r25, Z+13	; 0x0d
    1364:	d4 df       	rcall	.-88     	; 0x130e <CDC_Device_SendByte>
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 11       	cpse	r24, r1
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <CDC_Device_putchar+0x16>
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	20 e0       	ldi	r18, 0x00	; 0
}
    1372:	88 27       	eor	r24, r24
    1374:	99 27       	eor	r25, r25
    1376:	82 1b       	sub	r24, r18
    1378:	93 0b       	sbc	r25, r19
    137a:	08 95       	ret

0000137c <CDC_Device_Flush>:
{
    137c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    137e:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	31 f5       	brne	.+76     	; 0x13d2 <CDC_Device_Flush+0x56>
    1386:	84 89       	ldd	r24, Z+20	; 0x14
    1388:	95 89       	ldd	r25, Z+21	; 0x15
    138a:	a6 89       	ldd	r26, Z+22	; 0x16
    138c:	b7 89       	ldd	r27, Z+23	; 0x17
    138e:	89 2b       	or	r24, r25
    1390:	8a 2b       	or	r24, r26
    1392:	8b 2b       	or	r24, r27
    1394:	f1 f0       	breq	.+60     	; 0x13d2 <CDC_Device_Flush+0x56>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1396:	81 81       	ldd	r24, Z+1	; 0x01
    1398:	8f 70       	andi	r24, 0x0F	; 15
    139a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    139e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    13a2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	if (!(Endpoint_BytesInEndpoint()))
    13a6:	89 2b       	or	r24, r25
    13a8:	11 f4       	brne	.+4      	; 0x13ae <CDC_Device_Flush+0x32>
	  return ENDPOINT_READYWAIT_NoError;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	08 95       	ret
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13ae:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13b6:	8e 77       	andi	r24, 0x7E	; 126
    13b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (BankFull)
    13bc:	95 fd       	sbrc	r25, 5
    13be:	f5 cf       	rjmp	.-22     	; 0x13aa <CDC_Device_Flush+0x2e>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    13c0:	50 dc       	rcall	.-1888   	; 0xc62 <Endpoint_WaitUntilReady>
    13c2:	81 11       	cpse	r24, r1
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <CDC_Device_Flush+0x58>
    13c6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13ca:	9e 77       	andi	r25, 0x7E	; 126
    13cc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
    13d0:	08 95       	ret
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    13d2:	82 e0       	ldi	r24, 0x02	; 2
}
    13d4:	08 95       	ret

000013d6 <CDC_Device_USBTask>:
{
    13d6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    13d8:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>
    13dc:	84 30       	cpi	r24, 0x04	; 4
    13de:	91 f4       	brne	.+36     	; 0x1404 <CDC_Device_USBTask+0x2e>
    13e0:	84 89       	ldd	r24, Z+20	; 0x14
    13e2:	95 89       	ldd	r25, Z+21	; 0x15
    13e4:	a6 89       	ldd	r26, Z+22	; 0x16
    13e6:	b7 89       	ldd	r27, Z+23	; 0x17
    13e8:	89 2b       	or	r24, r25
    13ea:	8a 2b       	or	r24, r26
    13ec:	8b 2b       	or	r24, r27
    13ee:	51 f0       	breq	.+20     	; 0x1404 <CDC_Device_USBTask+0x2e>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13f0:	81 81       	ldd	r24, Z+1	; 0x01
    13f2:	8f 70       	andi	r24, 0x0F	; 15
    13f4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsINReady())
    13fc:	80 ff       	sbrs	r24, 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
    1400:	cf 01       	movw	r24, r30
    1402:	bc cf       	rjmp	.-136    	; 0x137c <CDC_Device_Flush>
}
    1404:	08 95       	ret

00001406 <CDC_Device_ReceiveByte>:
{
    1406:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1408:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	19 f0       	breq	.+6      	; 0x1416 <CDC_Device_ReceiveByte+0x10>
	  return -1;
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	9f ef       	ldi	r25, 0xFF	; 255
    1414:	08 95       	ret
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1416:	84 89       	ldd	r24, Z+20	; 0x14
    1418:	95 89       	ldd	r25, Z+21	; 0x15
    141a:	a6 89       	ldd	r26, Z+22	; 0x16
    141c:	b7 89       	ldd	r27, Z+23	; 0x17
    141e:	89 2b       	or	r24, r25
    1420:	8a 2b       	or	r24, r26
    1422:	8b 2b       	or	r24, r27
    1424:	a9 f3       	breq	.-22     	; 0x1410 <CDC_Device_ReceiveByte+0xa>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1426:	86 81       	ldd	r24, Z+6	; 0x06
    1428:	8f 70       	andi	r24, 0x0F	; 15
    142a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    142e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsOUTReceived())
    1432:	82 ff       	sbrs	r24, 2
    1434:	ed cf       	rjmp	.-38     	; 0x1410 <CDC_Device_ReceiveByte+0xa>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1436:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    143a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		if (Endpoint_BytesInEndpoint())
    143e:	89 2b       	or	r24, r25
    1440:	79 f0       	breq	.+30     	; 0x1460 <CDC_Device_ReceiveByte+0x5a>
				return UEDATX;
    1442:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		  ReceivedByte = Endpoint_Read_8();
    1446:	90 e0       	ldi	r25, 0x00	; 0
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1448:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    144c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		if (!(Endpoint_BytesInEndpoint()))
    1450:	23 2b       	or	r18, r19
    1452:	29 f4       	brne	.+10     	; 0x145e <CDC_Device_ReceiveByte+0x58>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1454:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1458:	2b 77       	andi	r18, 0x7B	; 123
    145a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    145e:	08 95       	ret
	int16_t ReceivedByte = -1;
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	9f ef       	ldi	r25, 0xFF	; 255
    1464:	f1 cf       	rjmp	.-30     	; 0x1448 <CDC_Device_ReceiveByte+0x42>

00001466 <CDC_Device_getchar>:

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    1466:	fc 01       	movw	r30, r24
    1468:	84 85       	ldd	r24, Z+12	; 0x0c
    146a:	95 85       	ldd	r25, Z+13	; 0x0d
    146c:	cc df       	rcall	.-104    	; 0x1406 <CDC_Device_ReceiveByte>

	if (ReceivedByte < 0)
    146e:	97 ff       	sbrs	r25, 7
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <CDC_Device_getchar+0x10>
	  return _FDEV_EOF;
    1472:	8e ef       	ldi	r24, 0xFE	; 254
    1474:	9f ef       	ldi	r25, 0xFF	; 255

	return ReceivedByte;
}
    1476:	08 95       	ret

00001478 <CDC_Device_CreateStream>:
{
    1478:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    147a:	2e e0       	ldi	r18, 0x0E	; 14
    147c:	db 01       	movw	r26, r22
    147e:	1d 92       	st	X+, r1
    1480:	2a 95       	dec	r18
    1482:	e9 f7       	brne	.-6      	; 0x147e <CDC_Device_CreateStream+0x6>
    1484:	23 e0       	ldi	r18, 0x03	; 3
    1486:	23 83       	std	Z+3, r18	; 0x03
    1488:	2e ea       	ldi	r18, 0xAE	; 174
    148a:	39 e0       	ldi	r19, 0x09	; 9
    148c:	31 87       	std	Z+9, r19	; 0x09
    148e:	20 87       	std	Z+8, r18	; 0x08
    1490:	23 e3       	ldi	r18, 0x33	; 51
    1492:	3a e0       	ldi	r19, 0x0A	; 10
    1494:	33 87       	std	Z+11, r19	; 0x0b
    1496:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1498:	95 87       	std	Z+13, r25	; 0x0d
    149a:	84 87       	std	Z+12, r24	; 0x0c
}
    149c:	08 95       	ret

0000149e <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    149e:	08 95       	ret

000014a0 <CDC_Device_ProcessControlRequest>:
{
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	ec 01       	movw	r28, r24
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    14aa:	83 ff       	sbrs	r24, 3
    14ac:	13 c0       	rjmp	.+38     	; 0x14d4 <CDC_Device_ProcessControlRequest+0x34>
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    14ae:	28 81       	ld	r18, Y
    14b0:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <USB_ControlRequest+0x4>
    14b4:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <USB_ControlRequest+0x5>
    14b8:	28 17       	cp	r18, r24
    14ba:	19 06       	cpc	r1, r25
    14bc:	59 f4       	brne	.+22     	; 0x14d4 <CDC_Device_ProcessControlRequest+0x34>
	switch (USB_ControlRequest.bRequest)
    14be:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <USB_ControlRequest+0x1>
    14c2:	82 32       	cpi	r24, 0x22	; 34
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <CDC_Device_ProcessControlRequest+0x28>
    14c6:	82 c0       	rjmp	.+260    	; 0x15cc <CDC_Device_ProcessControlRequest+0x12c>
    14c8:	40 f4       	brcc	.+16     	; 0x14da <CDC_Device_ProcessControlRequest+0x3a>
    14ca:	80 32       	cpi	r24, 0x20	; 32
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <CDC_Device_ProcessControlRequest+0x30>
    14ce:	4c c0       	rjmp	.+152    	; 0x1568 <CDC_Device_ProcessControlRequest+0xc8>
    14d0:	81 32       	cpi	r24, 0x21	; 33
    14d2:	a9 f0       	breq	.+42     	; 0x14fe <CDC_Device_ProcessControlRequest+0x5e>
}
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret
	switch (USB_ControlRequest.bRequest)
    14da:	83 32       	cpi	r24, 0x23	; 35
    14dc:	d9 f7       	brne	.-10     	; 0x14d4 <CDC_Device_ProcessControlRequest+0x34>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14de:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <USB_ControlRequest>
    14e2:	81 32       	cpi	r24, 0x21	; 33
    14e4:	b9 f7       	brne	.-18     	; 0x14d4 <CDC_Device_ProcessControlRequest+0x34>
				UEINTX &= ~(1 << RXSTPI);
    14e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14ea:	87 7f       	andi	r24, 0xF7	; 247
    14ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
    14f0:	99 db       	rcall	.-2254   	; 0xc24 <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    14f2:	60 91 88 03 	lds	r22, 0x0388	; 0x800388 <USB_ControlRequest+0x2>
    14f6:	ce 01       	movw	r24, r28
}
    14f8:	df 91       	pop	r29
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    14fa:	cf 91       	pop	r28
    14fc:	d0 cf       	rjmp	.-96     	; 0x149e <CDC_Device_Event_Stub>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    14fe:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <USB_ControlRequest>
    1502:	81 3a       	cpi	r24, 0xA1	; 161
    1504:	39 f7       	brne	.-50     	; 0x14d4 <CDC_Device_ProcessControlRequest+0x34>
    1506:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    150a:	87 7f       	andi	r24, 0xF7	; 247
    150c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1510:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsINReady()));
    1514:	80 ff       	sbrs	r24, 0
    1516:	fc cf       	rjmp	.-8      	; 0x1510 <CDC_Device_ProcessControlRequest+0x70>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1518:	8c 89       	ldd	r24, Y+20	; 0x14
    151a:	9d 89       	ldd	r25, Y+21	; 0x15
    151c:	ae 89       	ldd	r26, Y+22	; 0x16
    151e:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1520:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1524:	49 2f       	mov	r20, r25
    1526:	5a 2f       	mov	r21, r26
    1528:	6b 2f       	mov	r22, r27
    152a:	77 27       	eor	r23, r23
    152c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
    1530:	ad 01       	movw	r20, r26
    1532:	66 27       	eor	r22, r22
    1534:	77 27       	eor	r23, r23
    1536:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
    153a:	8b 2f       	mov	r24, r27
    153c:	99 27       	eor	r25, r25
    153e:	aa 27       	eor	r26, r26
    1540:	bb 27       	eor	r27, r27
    1542:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1546:	88 8d       	ldd	r24, Y+24	; 0x18
				UEDATX = Data;
    1548:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    154c:	89 8d       	ldd	r24, Y+25	; 0x19
    154e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1552:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1554:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1558:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    155c:	8e 77       	andi	r24, 0x7E	; 126
    155e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    1562:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
    1564:	cf 91       	pop	r28
    1566:	5e cb       	rjmp	.-2372   	; 0xc24 <Endpoint_ClearStatusStage>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1568:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <USB_ControlRequest>
    156c:	81 32       	cpi	r24, 0x21	; 33
    156e:	09 f0       	breq	.+2      	; 0x1572 <CDC_Device_ProcessControlRequest+0xd2>
    1570:	b1 cf       	rjmp	.-158    	; 0x14d4 <CDC_Device_ProcessControlRequest+0x34>
				UEINTX &= ~(1 << RXSTPI);
    1572:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1576:	87 7f       	andi	r24, 0xF7	; 247
    1578:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    157c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsOUTReceived()))
    1580:	82 ff       	sbrs	r24, 2
    1582:	1f c0       	rjmp	.+62     	; 0x15c2 <CDC_Device_ProcessControlRequest+0x122>
				Data.Bytes[0] = UEDATX;
    1584:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
    1588:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
    158c:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
    1590:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1594:	3c 8b       	std	Y+20, r19	; 0x14
    1596:	2d 8b       	std	Y+21, r18	; 0x15
    1598:	9e 8b       	std	Y+22, r25	; 0x16
    159a:	8f 8b       	std	Y+23, r24	; 0x17
				return UEDATX;
    159c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    15a0:	88 8f       	std	Y+24, r24	; 0x18
    15a2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    15a6:	89 8f       	std	Y+25, r24	; 0x19
    15a8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    15ac:	8a 8f       	std	Y+26, r24	; 0x1a
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15b2:	8b 77       	andi	r24, 0x7B	; 123
    15b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    15b8:	35 db       	rcall	.-2454   	; 0xc24 <Endpoint_ClearStatusStage>
}
    15ba:	ce 01       	movw	r24, r28
    15bc:	df 91       	pop	r29
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    15be:	cf 91       	pop	r28
    15c0:	6e cf       	rjmp	.-292    	; 0x149e <CDC_Device_Event_Stub>
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    15c2:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USB_DeviceState>
    15c6:	81 11       	cpse	r24, r1
    15c8:	d9 cf       	rjmp	.-78     	; 0x157c <CDC_Device_ProcessControlRequest+0xdc>
    15ca:	84 cf       	rjmp	.-248    	; 0x14d4 <CDC_Device_ProcessControlRequest+0x34>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15cc:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <USB_ControlRequest>
    15d0:	81 32       	cpi	r24, 0x21	; 33
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <CDC_Device_ProcessControlRequest+0x136>
    15d4:	7f cf       	rjmp	.-258    	; 0x14d4 <CDC_Device_ProcessControlRequest+0x34>
				UEINTX &= ~(1 << RXSTPI);
    15d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15da:	87 7f       	andi	r24, 0xF7	; 247
    15dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
    15e0:	21 db       	rcall	.-2494   	; 0xc24 <Endpoint_ClearStatusStage>
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    15e2:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <USB_ControlRequest+0x2>
    15e6:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <USB_ControlRequest+0x3>
    15ea:	99 8b       	std	Y+17, r25	; 0x11
    15ec:	88 8b       	std	Y+16, r24	; 0x10
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    15ee:	ce 01       	movw	r24, r28
}
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    15f4:	0c 94 49 01 	jmp	0x292	; 0x292 <EVENT_CDC_Device_ControLineStateChanged>

000015f8 <_exit>:
    15f8:	f8 94       	cli

000015fa <__stop_program>:
    15fa:	ff cf       	rjmp	.-2      	; 0x15fa <__stop_program>
